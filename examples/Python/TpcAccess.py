# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TpcAccess')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TpcAccess')
    _TpcAccess = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TpcAccess', [dirname(__file__)])
        except ImportError:
            import _TpcAccess
            return _TpcAccess
        try:
            _mod = imp.load_module('_TpcAccess', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TpcAccess = swig_import_helper()
    del swig_import_helper
else:
    import _TpcAccess
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def TPC_GetInputRange(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', RangeIdx: 'int') -> "double *":
    return _TpcAccess.TPC_GetInputRange(deviceIx, boardAddress, inputNumber, RangeIdx)
TPC_GetInputRange = _TpcAccess.TPC_GetInputRange

def TPC_GetChargeInputRange(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', RangeIdx: 'int') -> "double *":
    return _TpcAccess.TPC_GetChargeInputRange(deviceIx, boardAddress, inputNumber, RangeIdx)
TPC_GetChargeInputRange = _TpcAccess.TPC_GetChargeInputRange

def TPC_GetBoardStatus(deviceIx: 'int', boardAddress: 'int', status: 'TPC_BoardStatus', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetBoardStatus(deviceIx, boardAddress, status, structSize)
TPC_GetBoardStatus = _TpcAccess.TPC_GetBoardStatus

def TPC_GetInputStatus(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', status: 'TPC_InputStatus', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetInputStatus(deviceIx, boardAddress, inputNumber, status, structSize)
TPC_GetInputStatus = _TpcAccess.TPC_GetInputStatus
tpc_noError = _TpcAccess.tpc_noError
tpc_errCalibrating = _TpcAccess.tpc_errCalibrating
tpc_errNoConnection = _TpcAccess.tpc_errNoConnection
tpc_errServerClientVersionConflict = _TpcAccess.tpc_errServerClientVersionConflict
tpc_errDeviceInitializationFailure = _TpcAccess.tpc_errDeviceInitializationFailure
tpc_errHardwareFailure = _TpcAccess.tpc_errHardwareFailure
tpc_errTransmissionError = _TpcAccess.tpc_errTransmissionError
tpc_errStartError = _TpcAccess.tpc_errStartError
tpc_errIncompatibleBoards = _TpcAccess.tpc_errIncompatibleBoards
tpc_errInvalidDeviceIx = _TpcAccess.tpc_errInvalidDeviceIx
tpc_errInvalidBoardAddress = _TpcAccess.tpc_errInvalidBoardAddress
tpc_errInvalidInputNumber = _TpcAccess.tpc_errInvalidInputNumber
tpc_errInvalidIndex = _TpcAccess.tpc_errInvalidIndex
tpc_errBufferTooShort = _TpcAccess.tpc_errBufferTooShort
tpc_errInvalidParameter = _TpcAccess.tpc_errInvalidParameter
tpc_errInvalidParameterValue = _TpcAccess.tpc_errInvalidParameterValue
tpc_errInvalidCommand = _TpcAccess.tpc_errInvalidCommand
tpc_errWrongSystemState = _TpcAccess.tpc_errWrongSystemState
tpc_errInvalidBlockNumber = _TpcAccess.tpc_errInvalidBlockNumber
tpc_errNoData = _TpcAccess.tpc_errNoData
tpc_errNewMeasurement = _TpcAccess.tpc_errNewMeasurement
tpc_errLoadSettingFile = _TpcAccess.tpc_errLoadSettingFile
tpc_errWriteSettingFile = _TpcAccess.tpc_errWriteSettingFile
tpc_errNotImplemented = _TpcAccess.tpc_errNotImplemented
tpc_errInternalError = _TpcAccess.tpc_errInternalError
tpc_errAutoSequence = _TpcAccess.tpc_errAutoSequence
tpc_noHardwarePresent = _TpcAccess.tpc_noHardwarePresent
tpc_errTimeout = _TpcAccess.tpc_errTimeout
tpc_errMeasurementAborted = _TpcAccess.tpc_errMeasurementAborted

def TPC_ErrorToString(errorCode: 'int', errorString: 'char *', maxLen: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ErrorToString(errorCode, errorString, maxLen)
TPC_ErrorToString = _TpcAccess.TPC_ErrorToString
tpc_maxBoards = _TpcAccess.tpc_maxBoards
tpc_maxInputs = _TpcAccess.tpc_maxInputs
tpc_maxPathLength = _TpcAccess.tpc_maxPathLength
tpc_maxInputRanges = _TpcAccess.tpc_maxInputRanges
tpc_maxChargeInputRanges = _TpcAccess.tpc_maxChargeInputRanges

def TPC_GetApiVersion() -> "int":
    return _TpcAccess.TPC_GetApiVersion()
TPC_GetApiVersion = _TpcAccess.TPC_GetApiVersion
class TPC_Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_Version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _TpcAccess.TPC_Version_major_set
    __swig_getmethods__["major"] = _TpcAccess.TPC_Version_major_get
    if _newclass:
        major = _swig_property(_TpcAccess.TPC_Version_major_get, _TpcAccess.TPC_Version_major_set)
    __swig_setmethods__["minor"] = _TpcAccess.TPC_Version_minor_set
    __swig_getmethods__["minor"] = _TpcAccess.TPC_Version_minor_get
    if _newclass:
        minor = _swig_property(_TpcAccess.TPC_Version_minor_get, _TpcAccess.TPC_Version_minor_set)
    __swig_setmethods__["build"] = _TpcAccess.TPC_Version_build_set
    __swig_getmethods__["build"] = _TpcAccess.TPC_Version_build_get
    if _newclass:
        build = _swig_property(_TpcAccess.TPC_Version_build_get, _TpcAccess.TPC_Version_build_set)
    __swig_setmethods__["revision"] = _TpcAccess.TPC_Version_revision_set
    __swig_getmethods__["revision"] = _TpcAccess.TPC_Version_revision_get
    if _newclass:
        revision = _swig_property(_TpcAccess.TPC_Version_revision_get, _TpcAccess.TPC_Version_revision_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_Version()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_Version
    __del__ = lambda self: None
TPC_Version_swigregister = _TpcAccess.TPC_Version_swigregister
TPC_Version_swigregister(TPC_Version)


def TPC_GetVersion() -> "TPC_Version":
    return _TpcAccess.TPC_GetVersion()
TPC_GetVersion = _TpcAccess.TPC_GetVersion
class TPC_DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_DateTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _TpcAccess.TPC_DateTime_year_set
    __swig_getmethods__["year"] = _TpcAccess.TPC_DateTime_year_get
    if _newclass:
        year = _swig_property(_TpcAccess.TPC_DateTime_year_get, _TpcAccess.TPC_DateTime_year_set)
    __swig_setmethods__["month"] = _TpcAccess.TPC_DateTime_month_set
    __swig_getmethods__["month"] = _TpcAccess.TPC_DateTime_month_get
    if _newclass:
        month = _swig_property(_TpcAccess.TPC_DateTime_month_get, _TpcAccess.TPC_DateTime_month_set)
    __swig_setmethods__["day"] = _TpcAccess.TPC_DateTime_day_set
    __swig_getmethods__["day"] = _TpcAccess.TPC_DateTime_day_get
    if _newclass:
        day = _swig_property(_TpcAccess.TPC_DateTime_day_get, _TpcAccess.TPC_DateTime_day_set)
    __swig_setmethods__["hour"] = _TpcAccess.TPC_DateTime_hour_set
    __swig_getmethods__["hour"] = _TpcAccess.TPC_DateTime_hour_get
    if _newclass:
        hour = _swig_property(_TpcAccess.TPC_DateTime_hour_get, _TpcAccess.TPC_DateTime_hour_set)
    __swig_setmethods__["minute"] = _TpcAccess.TPC_DateTime_minute_set
    __swig_getmethods__["minute"] = _TpcAccess.TPC_DateTime_minute_get
    if _newclass:
        minute = _swig_property(_TpcAccess.TPC_DateTime_minute_get, _TpcAccess.TPC_DateTime_minute_set)
    __swig_setmethods__["second"] = _TpcAccess.TPC_DateTime_second_set
    __swig_getmethods__["second"] = _TpcAccess.TPC_DateTime_second_get
    if _newclass:
        second = _swig_property(_TpcAccess.TPC_DateTime_second_get, _TpcAccess.TPC_DateTime_second_set)
    __swig_setmethods__["milliSecond"] = _TpcAccess.TPC_DateTime_milliSecond_set
    __swig_getmethods__["milliSecond"] = _TpcAccess.TPC_DateTime_milliSecond_get
    if _newclass:
        milliSecond = _swig_property(_TpcAccess.TPC_DateTime_milliSecond_get, _TpcAccess.TPC_DateTime_milliSecond_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_DateTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_DateTime
    __del__ = lambda self: None
TPC_DateTime_swigregister = _TpcAccess.TPC_DateTime_swigregister
TPC_DateTime_swigregister(TPC_DateTime)


def TPC_BeginSystemDefinition() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_BeginSystemDefinition()
TPC_BeginSystemDefinition = _TpcAccess.TPC_BeginSystemDefinition

def TPC_AddDevice(url: 'char const *') -> "int":
    return _TpcAccess.TPC_AddDevice(url)
TPC_AddDevice = _TpcAccess.TPC_AddDevice

def TPC_AddDeviceEx(url: 'char const *', recvTimeOut: 'int', sendTimeOut: 'int') -> "int":
    return _TpcAccess.TPC_AddDeviceEx(url, recvTimeOut, sendTimeOut)
TPC_AddDeviceEx = _TpcAccess.TPC_AddDeviceEx

def TPC_EndSystemDefinition(connectionTimeoutMilliseconds: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_EndSystemDefinition(connectionTimeoutMilliseconds)
TPC_EndSystemDefinition = _TpcAccess.TPC_EndSystemDefinition

def TPC_NumDevices() -> "int":
    return _TpcAccess.TPC_NumDevices()
TPC_NumDevices = _TpcAccess.TPC_NumDevices

def TPC_GetDeviceUrl(index: 'int', buffer: 'char *', maxLen: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetDeviceUrl(index, buffer, maxLen)
TPC_GetDeviceUrl = _TpcAccess.TPC_GetDeviceUrl

def TPC_NewSystem(id: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_NewSystem(id)
TPC_NewSystem = _TpcAccess.TPC_NewSystem

def TPC_DeleteSystem(id: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_DeleteSystem(id)
TPC_DeleteSystem = _TpcAccess.TPC_DeleteSystem

def TPC_BeginSystemDefinitionSystem(id: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_BeginSystemDefinitionSystem(id)
TPC_BeginSystemDefinitionSystem = _TpcAccess.TPC_BeginSystemDefinitionSystem

def TPC_AddDeviceSystem(id: 'int', url: 'char const *', deviceIx: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_AddDeviceSystem(id, url, deviceIx)
TPC_AddDeviceSystem = _TpcAccess.TPC_AddDeviceSystem

def TPC_AddDeviceSystemEx(id: 'int', url: 'char const *', recvTimeout: 'int', sendTimeout: 'int', deviceIx: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_AddDeviceSystemEx(id, url, recvTimeout, sendTimeout, deviceIx)
TPC_AddDeviceSystemEx = _TpcAccess.TPC_AddDeviceSystemEx

def TPC_RemoveDeviceSystem(id: 'int', url: 'char const *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_RemoveDeviceSystem(id, url)
TPC_RemoveDeviceSystem = _TpcAccess.TPC_RemoveDeviceSystem

def TPC_EndSystemDefinitionSystem(id: 'int', connectionTimeoutMilliseconds: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_EndSystemDefinitionSystem(id, connectionTimeoutMilliseconds)
TPC_EndSystemDefinitionSystem = _TpcAccess.TPC_EndSystemDefinitionSystem

def TPC_NumDevicesSystem(id: 'int', n: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_NumDevicesSystem(id, n)
TPC_NumDevicesSystem = _TpcAccess.TPC_NumDevicesSystem

def TPC_GetDeviceUrlSystem(id: 'int', index: 'int', buffer: 'char *', maxLen: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetDeviceUrlSystem(id, index, buffer, maxLen)
TPC_GetDeviceUrlSystem = _TpcAccess.TPC_GetDeviceUrlSystem

def TPC_ResetConfigurationSystem(id: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ResetConfigurationSystem(id)
TPC_ResetConfigurationSystem = _TpcAccess.TPC_ResetConfigurationSystem
class TPC_DeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_DeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_DeviceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _TpcAccess.TPC_DeviceInfo_deviceID_set
    __swig_getmethods__["deviceID"] = _TpcAccess.TPC_DeviceInfo_deviceID_get
    if _newclass:
        deviceID = _swig_property(_TpcAccess.TPC_DeviceInfo_deviceID_get, _TpcAccess.TPC_DeviceInfo_deviceID_set)
    __swig_setmethods__["serverSoftwareVersion"] = _TpcAccess.TPC_DeviceInfo_serverSoftwareVersion_set
    __swig_getmethods__["serverSoftwareVersion"] = _TpcAccess.TPC_DeviceInfo_serverSoftwareVersion_get
    if _newclass:
        serverSoftwareVersion = _swig_property(_TpcAccess.TPC_DeviceInfo_serverSoftwareVersion_get, _TpcAccess.TPC_DeviceInfo_serverSoftwareVersion_set)
    __swig_setmethods__["simulatedHardware"] = _TpcAccess.TPC_DeviceInfo_simulatedHardware_set
    __swig_getmethods__["simulatedHardware"] = _TpcAccess.TPC_DeviceInfo_simulatedHardware_get
    if _newclass:
        simulatedHardware = _swig_property(_TpcAccess.TPC_DeviceInfo_simulatedHardware_get, _TpcAccess.TPC_DeviceInfo_simulatedHardware_set)
    __swig_setmethods__["installedBoards"] = _TpcAccess.TPC_DeviceInfo_installedBoards_set
    __swig_getmethods__["installedBoards"] = _TpcAccess.TPC_DeviceInfo_installedBoards_get
    if _newclass:
        installedBoards = _swig_property(_TpcAccess.TPC_DeviceInfo_installedBoards_get, _TpcAccess.TPC_DeviceInfo_installedBoards_set)
    __swig_setmethods__["deviceName"] = _TpcAccess.TPC_DeviceInfo_deviceName_set
    __swig_getmethods__["deviceName"] = _TpcAccess.TPC_DeviceInfo_deviceName_get
    if _newclass:
        deviceName = _swig_property(_TpcAccess.TPC_DeviceInfo_deviceName_get, _TpcAccess.TPC_DeviceInfo_deviceName_set)
    __swig_setmethods__["deviceDescription"] = _TpcAccess.TPC_DeviceInfo_deviceDescription_set
    __swig_getmethods__["deviceDescription"] = _TpcAccess.TPC_DeviceInfo_deviceDescription_get
    if _newclass:
        deviceDescription = _swig_property(_TpcAccess.TPC_DeviceInfo_deviceDescription_get, _TpcAccess.TPC_DeviceInfo_deviceDescription_set)
    __swig_setmethods__["deviceMACAddress"] = _TpcAccess.TPC_DeviceInfo_deviceMACAddress_set
    __swig_getmethods__["deviceMACAddress"] = _TpcAccess.TPC_DeviceInfo_deviceMACAddress_get
    if _newclass:
        deviceMACAddress = _swig_property(_TpcAccess.TPC_DeviceInfo_deviceMACAddress_get, _TpcAccess.TPC_DeviceInfo_deviceMACAddress_set)
    __swig_setmethods__["UseLocalTime"] = _TpcAccess.TPC_DeviceInfo_UseLocalTime_set
    __swig_getmethods__["UseLocalTime"] = _TpcAccess.TPC_DeviceInfo_UseLocalTime_get
    if _newclass:
        UseLocalTime = _swig_property(_TpcAccess.TPC_DeviceInfo_UseLocalTime_get, _TpcAccess.TPC_DeviceInfo_UseLocalTime_set)
    __swig_setmethods__["AutoStartMeasurement"] = _TpcAccess.TPC_DeviceInfo_AutoStartMeasurement_set
    __swig_getmethods__["AutoStartMeasurement"] = _TpcAccess.TPC_DeviceInfo_AutoStartMeasurement_get
    if _newclass:
        AutoStartMeasurement = _swig_property(_TpcAccess.TPC_DeviceInfo_AutoStartMeasurement_get, _TpcAccess.TPC_DeviceInfo_AutoStartMeasurement_set)
    __swig_setmethods__["AutoStartAutoSequence"] = _TpcAccess.TPC_DeviceInfo_AutoStartAutoSequence_set
    __swig_getmethods__["AutoStartAutoSequence"] = _TpcAccess.TPC_DeviceInfo_AutoStartAutoSequence_get
    if _newclass:
        AutoStartAutoSequence = _swig_property(_TpcAccess.TPC_DeviceInfo_AutoStartAutoSequence_get, _TpcAccess.TPC_DeviceInfo_AutoStartAutoSequence_set)
    __swig_setmethods__["ServerPort1"] = _TpcAccess.TPC_DeviceInfo_ServerPort1_set
    __swig_getmethods__["ServerPort1"] = _TpcAccess.TPC_DeviceInfo_ServerPort1_get
    if _newclass:
        ServerPort1 = _swig_property(_TpcAccess.TPC_DeviceInfo_ServerPort1_get, _TpcAccess.TPC_DeviceInfo_ServerPort1_set)
    __swig_setmethods__["ServerPort2"] = _TpcAccess.TPC_DeviceInfo_ServerPort2_set
    __swig_getmethods__["ServerPort2"] = _TpcAccess.TPC_DeviceInfo_ServerPort2_get
    if _newclass:
        ServerPort2 = _swig_property(_TpcAccess.TPC_DeviceInfo_ServerPort2_get, _TpcAccess.TPC_DeviceInfo_ServerPort2_set)
    __swig_setmethods__["TargetPort"] = _TpcAccess.TPC_DeviceInfo_TargetPort_set
    __swig_getmethods__["TargetPort"] = _TpcAccess.TPC_DeviceInfo_TargetPort_get
    if _newclass:
        TargetPort = _swig_property(_TpcAccess.TPC_DeviceInfo_TargetPort_get, _TpcAccess.TPC_DeviceInfo_TargetPort_set)
    __swig_setmethods__["TwoinOneEnabled"] = _TpcAccess.TPC_DeviceInfo_TwoinOneEnabled_set
    __swig_getmethods__["TwoinOneEnabled"] = _TpcAccess.TPC_DeviceInfo_TwoinOneEnabled_get
    if _newclass:
        TwoinOneEnabled = _swig_property(_TpcAccess.TPC_DeviceInfo_TwoinOneEnabled_get, _TpcAccess.TPC_DeviceInfo_TwoinOneEnabled_set)
    __swig_setmethods__["TwoInOnepassword"] = _TpcAccess.TPC_DeviceInfo_TwoInOnepassword_set
    __swig_getmethods__["TwoInOnepassword"] = _TpcAccess.TPC_DeviceInfo_TwoInOnepassword_get
    if _newclass:
        TwoInOnepassword = _swig_property(_TpcAccess.TPC_DeviceInfo_TwoInOnepassword_get, _TpcAccess.TPC_DeviceInfo_TwoInOnepassword_set)
    __swig_setmethods__["DataFileName"] = _TpcAccess.TPC_DeviceInfo_DataFileName_set
    __swig_getmethods__["DataFileName"] = _TpcAccess.TPC_DeviceInfo_DataFileName_get
    if _newclass:
        DataFileName = _swig_property(_TpcAccess.TPC_DeviceInfo_DataFileName_get, _TpcAccess.TPC_DeviceInfo_DataFileName_set)
    __swig_setmethods__["NumberOfBackupFiles"] = _TpcAccess.TPC_DeviceInfo_NumberOfBackupFiles_set
    __swig_getmethods__["NumberOfBackupFiles"] = _TpcAccess.TPC_DeviceInfo_NumberOfBackupFiles_get
    if _newclass:
        NumberOfBackupFiles = _swig_property(_TpcAccess.TPC_DeviceInfo_NumberOfBackupFiles_get, _TpcAccess.TPC_DeviceInfo_NumberOfBackupFiles_set)
    __swig_setmethods__["HdFlushInterval"] = _TpcAccess.TPC_DeviceInfo_HdFlushInterval_set
    __swig_getmethods__["HdFlushInterval"] = _TpcAccess.TPC_DeviceInfo_HdFlushInterval_get
    if _newclass:
        HdFlushInterval = _swig_property(_TpcAccess.TPC_DeviceInfo_HdFlushInterval_get, _TpcAccess.TPC_DeviceInfo_HdFlushInterval_set)
    __swig_setmethods__["WriteTroughCache"] = _TpcAccess.TPC_DeviceInfo_WriteTroughCache_set
    __swig_getmethods__["WriteTroughCache"] = _TpcAccess.TPC_DeviceInfo_WriteTroughCache_get
    if _newclass:
        WriteTroughCache = _swig_property(_TpcAccess.TPC_DeviceInfo_WriteTroughCache_get, _TpcAccess.TPC_DeviceInfo_WriteTroughCache_set)
    __swig_setmethods__["ModelType"] = _TpcAccess.TPC_DeviceInfo_ModelType_set
    __swig_getmethods__["ModelType"] = _TpcAccess.TPC_DeviceInfo_ModelType_get
    if _newclass:
        ModelType = _swig_property(_TpcAccess.TPC_DeviceInfo_ModelType_get, _TpcAccess.TPC_DeviceInfo_ModelType_set)
    __swig_setmethods__["SyncLinkDetected"] = _TpcAccess.TPC_DeviceInfo_SyncLinkDetected_set
    __swig_getmethods__["SyncLinkDetected"] = _TpcAccess.TPC_DeviceInfo_SyncLinkDetected_get
    if _newclass:
        SyncLinkDetected = _swig_property(_TpcAccess.TPC_DeviceInfo_SyncLinkDetected_get, _TpcAccess.TPC_DeviceInfo_SyncLinkDetected_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_DeviceInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_DeviceInfo
    __del__ = lambda self: None
TPC_DeviceInfo_swigregister = _TpcAccess.TPC_DeviceInfo_swigregister
TPC_DeviceInfo_swigregister(TPC_DeviceInfo)


def TPC_GetDeviceInfo(deviceIx: 'int', deviceInfo: 'TPC_DeviceInfo', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetDeviceInfo(deviceIx, deviceInfo, structSize)
TPC_GetDeviceInfo = _TpcAccess.TPC_GetDeviceInfo

def TPC_SetDeviceSettings(deviceIx: 'int', deviceSettings: 'TPC_DeviceInfo') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetDeviceSettings(deviceIx, deviceSettings)
TPC_SetDeviceSettings = _TpcAccess.TPC_SetDeviceSettings

def TPC_GetFreeDiskSpace(deviceIx: 'int', freeDiskSpace: 'uint64_t *', DiskSize: 'uint64_t *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetFreeDiskSpace(deviceIx, freeDiskSpace, DiskSize)
TPC_GetFreeDiskSpace = _TpcAccess.TPC_GetFreeDiskSpace
tpc_optEcrExtensions = _TpcAccess.tpc_optEcrExtensions
tpc_optAvg16 = _TpcAccess.tpc_optAvg16
tpc_optTrgSlewRate = _TpcAccess.tpc_optTrgSlewRate
tpc_optTrgPower = _TpcAccess.tpc_optTrgPower
tpc_sync_oldserver = _TpcAccess.tpc_sync_oldserver
tpc_sync_notdetected = _TpcAccess.tpc_sync_notdetected
tpc_sync_detected = _TpcAccess.tpc_sync_detected
class TPC_BoardInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_BoardInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_BoardInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["boardClass"] = _TpcAccess.TPC_BoardInfo_boardClass_set
    __swig_getmethods__["boardClass"] = _TpcAccess.TPC_BoardInfo_boardClass_get
    if _newclass:
        boardClass = _swig_property(_TpcAccess.TPC_BoardInfo_boardClass_get, _TpcAccess.TPC_BoardInfo_boardClass_set)
    __swig_setmethods__["hardwareVersion"] = _TpcAccess.TPC_BoardInfo_hardwareVersion_set
    __swig_getmethods__["hardwareVersion"] = _TpcAccess.TPC_BoardInfo_hardwareVersion_get
    if _newclass:
        hardwareVersion = _swig_property(_TpcAccess.TPC_BoardInfo_hardwareVersion_get, _TpcAccess.TPC_BoardInfo_hardwareVersion_set)
    __swig_setmethods__["serialNr"] = _TpcAccess.TPC_BoardInfo_serialNr_set
    __swig_getmethods__["serialNr"] = _TpcAccess.TPC_BoardInfo_serialNr_get
    if _newclass:
        serialNr = _swig_property(_TpcAccess.TPC_BoardInfo_serialNr_get, _TpcAccess.TPC_BoardInfo_serialNr_set)
    __swig_setmethods__["driverVersion"] = _TpcAccess.TPC_BoardInfo_driverVersion_set
    __swig_getmethods__["driverVersion"] = _TpcAccess.TPC_BoardInfo_driverVersion_get
    if _newclass:
        driverVersion = _swig_property(_TpcAccess.TPC_BoardInfo_driverVersion_get, _TpcAccess.TPC_BoardInfo_driverVersion_set)
    __swig_setmethods__["firmwareVersion"] = _TpcAccess.TPC_BoardInfo_firmwareVersion_set
    __swig_getmethods__["firmwareVersion"] = _TpcAccess.TPC_BoardInfo_firmwareVersion_get
    if _newclass:
        firmwareVersion = _swig_property(_TpcAccess.TPC_BoardInfo_firmwareVersion_get, _TpcAccess.TPC_BoardInfo_firmwareVersion_set)
    __swig_setmethods__["numberOfInputs"] = _TpcAccess.TPC_BoardInfo_numberOfInputs_set
    __swig_getmethods__["numberOfInputs"] = _TpcAccess.TPC_BoardInfo_numberOfInputs_get
    if _newclass:
        numberOfInputs = _swig_property(_TpcAccess.TPC_BoardInfo_numberOfInputs_get, _TpcAccess.TPC_BoardInfo_numberOfInputs_set)
    __swig_setmethods__["maxMemory"] = _TpcAccess.TPC_BoardInfo_maxMemory_set
    __swig_getmethods__["maxMemory"] = _TpcAccess.TPC_BoardInfo_maxMemory_get
    if _newclass:
        maxMemory = _swig_property(_TpcAccess.TPC_BoardInfo_maxMemory_get, _TpcAccess.TPC_BoardInfo_maxMemory_set)
    __swig_setmethods__["maxSpeed"] = _TpcAccess.TPC_BoardInfo_maxSpeed_set
    __swig_getmethods__["maxSpeed"] = _TpcAccess.TPC_BoardInfo_maxSpeed_get
    if _newclass:
        maxSpeed = _swig_property(_TpcAccess.TPC_BoardInfo_maxSpeed_get, _TpcAccess.TPC_BoardInfo_maxSpeed_set)
    __swig_setmethods__["operationModeOptions"] = _TpcAccess.TPC_BoardInfo_operationModeOptions_set
    __swig_getmethods__["operationModeOptions"] = _TpcAccess.TPC_BoardInfo_operationModeOptions_get
    if _newclass:
        operationModeOptions = _swig_property(_TpcAccess.TPC_BoardInfo_operationModeOptions_get, _TpcAccess.TPC_BoardInfo_operationModeOptions_set)
    __swig_setmethods__["averageOptions"] = _TpcAccess.TPC_BoardInfo_averageOptions_set
    __swig_getmethods__["averageOptions"] = _TpcAccess.TPC_BoardInfo_averageOptions_get
    if _newclass:
        averageOptions = _swig_property(_TpcAccess.TPC_BoardInfo_averageOptions_get, _TpcAccess.TPC_BoardInfo_averageOptions_set)
    __swig_setmethods__["triggerOptions"] = _TpcAccess.TPC_BoardInfo_triggerOptions_set
    __swig_getmethods__["triggerOptions"] = _TpcAccess.TPC_BoardInfo_triggerOptions_get
    if _newclass:
        triggerOptions = _swig_property(_TpcAccess.TPC_BoardInfo_triggerOptions_get, _TpcAccess.TPC_BoardInfo_triggerOptions_set)
    __swig_setmethods__["lastFactoryCalibration"] = _TpcAccess.TPC_BoardInfo_lastFactoryCalibration_set
    __swig_getmethods__["lastFactoryCalibration"] = _TpcAccess.TPC_BoardInfo_lastFactoryCalibration_get
    if _newclass:
        lastFactoryCalibration = _swig_property(_TpcAccess.TPC_BoardInfo_lastFactoryCalibration_get, _TpcAccess.TPC_BoardInfo_lastFactoryCalibration_set)
    __swig_setmethods__["lastUserCalibration"] = _TpcAccess.TPC_BoardInfo_lastUserCalibration_set
    __swig_getmethods__["lastUserCalibration"] = _TpcAccess.TPC_BoardInfo_lastUserCalibration_get
    if _newclass:
        lastUserCalibration = _swig_property(_TpcAccess.TPC_BoardInfo_lastUserCalibration_get, _TpcAccess.TPC_BoardInfo_lastUserCalibration_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_BoardInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_BoardInfo
    __del__ = lambda self: None
TPC_BoardInfo_swigregister = _TpcAccess.TPC_BoardInfo_swigregister
TPC_BoardInfo_swigregister(TPC_BoardInfo)


def TPC_GetBoardInfo(deviceIx: 'int', boardAddress: 'int', boardInfo: 'TPC_BoardInfo', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetBoardInfo(deviceIx, boardAddress, boardInfo, structSize)
TPC_GetBoardInfo = _TpcAccess.TPC_GetBoardInfo
tpc_optOfsFullRange = _TpcAccess.tpc_optOfsFullRange
tpc_optFilterModule1 = _TpcAccess.tpc_optFilterModule1
tpc_optFilterModule2 = _TpcAccess.tpc_optFilterModule2
tpc_optDiffModule1 = _TpcAccess.tpc_optDiffModule1
tpc_optIcpSource = _TpcAccess.tpc_optIcpSource
tpc_opt50Ohm = _TpcAccess.tpc_opt50Ohm
tpc_optIcpProg = _TpcAccess.tpc_optIcpProg
tpc_optCharge = _TpcAccess.tpc_optCharge
class TPC_InputInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_InputInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_InputInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputClass"] = _TpcAccess.TPC_InputInfo_inputClass_set
    __swig_getmethods__["inputClass"] = _TpcAccess.TPC_InputInfo_inputClass_get
    if _newclass:
        inputClass = _swig_property(_TpcAccess.TPC_InputInfo_inputClass_get, _TpcAccess.TPC_InputInfo_inputClass_set)
    __swig_setmethods__["hardwareVersion"] = _TpcAccess.TPC_InputInfo_hardwareVersion_set
    __swig_getmethods__["hardwareVersion"] = _TpcAccess.TPC_InputInfo_hardwareVersion_get
    if _newclass:
        hardwareVersion = _swig_property(_TpcAccess.TPC_InputInfo_hardwareVersion_get, _TpcAccess.TPC_InputInfo_hardwareVersion_set)
    __swig_setmethods__["maxAdcSpeed"] = _TpcAccess.TPC_InputInfo_maxAdcSpeed_set
    __swig_getmethods__["maxAdcSpeed"] = _TpcAccess.TPC_InputInfo_maxAdcSpeed_get
    if _newclass:
        maxAdcSpeed = _swig_property(_TpcAccess.TPC_InputInfo_maxAdcSpeed_get, _TpcAccess.TPC_InputInfo_maxAdcSpeed_set)
    __swig_setmethods__["adcResolution"] = _TpcAccess.TPC_InputInfo_adcResolution_set
    __swig_getmethods__["adcResolution"] = _TpcAccess.TPC_InputInfo_adcResolution_get
    if _newclass:
        adcResolution = _swig_property(_TpcAccess.TPC_InputInfo_adcResolution_get, _TpcAccess.TPC_InputInfo_adcResolution_set)
    __swig_setmethods__["offsetOptions"] = _TpcAccess.TPC_InputInfo_offsetOptions_set
    __swig_getmethods__["offsetOptions"] = _TpcAccess.TPC_InputInfo_offsetOptions_get
    if _newclass:
        offsetOptions = _swig_property(_TpcAccess.TPC_InputInfo_offsetOptions_get, _TpcAccess.TPC_InputInfo_offsetOptions_set)
    __swig_setmethods__["filterOptions"] = _TpcAccess.TPC_InputInfo_filterOptions_set
    __swig_getmethods__["filterOptions"] = _TpcAccess.TPC_InputInfo_filterOptions_get
    if _newclass:
        filterOptions = _swig_property(_TpcAccess.TPC_InputInfo_filterOptions_get, _TpcAccess.TPC_InputInfo_filterOptions_set)
    __swig_setmethods__["diffOptions"] = _TpcAccess.TPC_InputInfo_diffOptions_set
    __swig_getmethods__["diffOptions"] = _TpcAccess.TPC_InputInfo_diffOptions_get
    if _newclass:
        diffOptions = _swig_property(_TpcAccess.TPC_InputInfo_diffOptions_get, _TpcAccess.TPC_InputInfo_diffOptions_set)
    __swig_setmethods__["inputCouplingOptions"] = _TpcAccess.TPC_InputInfo_inputCouplingOptions_set
    __swig_getmethods__["inputCouplingOptions"] = _TpcAccess.TPC_InputInfo_inputCouplingOptions_get
    if _newclass:
        inputCouplingOptions = _swig_property(_TpcAccess.TPC_InputInfo_inputCouplingOptions_get, _TpcAccess.TPC_InputInfo_inputCouplingOptions_set)
    __swig_setmethods__["inputRanges"] = _TpcAccess.TPC_InputInfo_inputRanges_set
    __swig_getmethods__["inputRanges"] = _TpcAccess.TPC_InputInfo_inputRanges_get
    if _newclass:
        inputRanges = _swig_property(_TpcAccess.TPC_InputInfo_inputRanges_get, _TpcAccess.TPC_InputInfo_inputRanges_set)
    __swig_setmethods__["maxMarkerMask"] = _TpcAccess.TPC_InputInfo_maxMarkerMask_set
    __swig_getmethods__["maxMarkerMask"] = _TpcAccess.TPC_InputInfo_maxMarkerMask_get
    if _newclass:
        maxMarkerMask = _swig_property(_TpcAccess.TPC_InputInfo_maxMarkerMask_get, _TpcAccess.TPC_InputInfo_maxMarkerMask_set)
    __swig_setmethods__["chargeInputRanges"] = _TpcAccess.TPC_InputInfo_chargeInputRanges_set
    __swig_getmethods__["chargeInputRanges"] = _TpcAccess.TPC_InputInfo_chargeInputRanges_get
    if _newclass:
        chargeInputRanges = _swig_property(_TpcAccess.TPC_InputInfo_chargeInputRanges_get, _TpcAccess.TPC_InputInfo_chargeInputRanges_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_InputInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_InputInfo
    __del__ = lambda self: None
TPC_InputInfo_swigregister = _TpcAccess.TPC_InputInfo_swigregister
TPC_InputInfo_swigregister(TPC_InputInfo)


def TPC_GetInputInfo(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', inputInfo: 'TPC_InputInfo', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetInputInfo(deviceIx, boardAddress, inputNumber, inputInfo, structSize)
TPC_GetInputInfo = _TpcAccess.TPC_GetInputInfo

def TPC_GetClusterNumbers(deviceIx: 'int', clusterNumbers: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetClusterNumbers(deviceIx, clusterNumbers)
TPC_GetClusterNumbers = _TpcAccess.TPC_GetClusterNumbers

def TPC_SetClusterNumbers(deviceIx: 'int', clusterNumbers: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetClusterNumbers(deviceIx, clusterNumbers)
TPC_SetClusterNumbers = _TpcAccess.TPC_SetClusterNumbers

def TPC_ClusterNumberToBoardAddress(deviceIx: 'int', clusterNumber: 'int', boardAddress: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ClusterNumberToBoardAddress(deviceIx, clusterNumber, boardAddress)
TPC_ClusterNumberToBoardAddress = _TpcAccess.TPC_ClusterNumberToBoardAddress

def TPC_ResetConfiguration() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ResetConfiguration()
TPC_ResetConfiguration = _TpcAccess.TPC_ResetConfiguration
tpc_parOperationMode = _TpcAccess.tpc_parOperationMode
tpc_parMultiplexerMode = _TpcAccess.tpc_parMultiplexerMode
tpc_parTimebaseSource = _TpcAccess.tpc_parTimebaseSource
tpc_parSamplingFrequency = _TpcAccess.tpc_parSamplingFrequency
tpc_parExternalClockDivisor = _TpcAccess.tpc_parExternalClockDivisor
tpc_parExternalTriggerMode = _TpcAccess.tpc_parExternalTriggerMode
tpc_parExtClockSamplingFrequency = _TpcAccess.tpc_parExtClockSamplingFrequency
tpc_parBlkNumberOfBlocks = _TpcAccess.tpc_parBlkNumberOfBlocks
tpc_parBlkBlockLength = _TpcAccess.tpc_parBlkBlockLength
tpc_parBlkTriggerDelay = _TpcAccess.tpc_parBlkTriggerDelay
tpc_parContMaximumDataLength = _TpcAccess.tpc_parContMaximumDataLength
tpc_parContStopTrailer = _TpcAccess.tpc_parContStopTrailer
tpc_parContEnableStopTrigger = _TpcAccess.tpc_parContEnableStopTrigger
tpc_parContEnableRecLengthLimit = _TpcAccess.tpc_parContEnableRecLengthLimit
tpc_parScopeAutoTrigger = _TpcAccess.tpc_parScopeAutoTrigger
tpc_parScopeSingleShot = _TpcAccess.tpc_parScopeSingleShot
tpc_parScopeBlockLength = _TpcAccess.tpc_parScopeBlockLength
tpc_parScopeTriggerDelay = _TpcAccess.tpc_parScopeTriggerDelay
tpc_parEcrDualMode = _TpcAccess.tpc_parEcrDualMode
tpc_parEcrMinimumBlockLength = _TpcAccess.tpc_parEcrMinimumBlockLength
tpc_parEcrTriggerDelay = _TpcAccess.tpc_parEcrTriggerDelay
tpc_parEcrPreTrigger = _TpcAccess.tpc_parEcrPreTrigger
tpc_parEcrPostTrigger = _TpcAccess.tpc_parEcrPostTrigger
tpc_parEcrMaximumNumberOfBlocks = _TpcAccess.tpc_parEcrMaximumNumberOfBlocks
tpc_parEcrEnableHoldOff = _TpcAccess.tpc_parEcrEnableHoldOff
tpc_parEcrHoldOffTime = _TpcAccess.tpc_parEcrHoldOffTime
tpc_parEcrMaximumBlockLength = _TpcAccess.tpc_parEcrMaximumBlockLength
tpc_parEcrRetriggerTime = _TpcAccess.tpc_parEcrRetriggerTime
tpc_parEcrTrailer = _TpcAccess.tpc_parEcrTrailer
tpc_parEcrClockDivisor = _TpcAccess.tpc_parEcrClockDivisor
tpc_parEcrDualEnableTrailer = _TpcAccess.tpc_parEcrDualEnableTrailer
tpc_parEcrDualTrailer = _TpcAccess.tpc_parEcrDualTrailer
tpc_parEcrDualEnableRecLengthLimit = _TpcAccess.tpc_parEcrDualEnableRecLengthLimit
tpc_parEcrDualMaxRecLength = _TpcAccess.tpc_parEcrDualMaxRecLength
tpc_parEcrEnableStopTrigger = _TpcAccess.tpc_parEcrEnableStopTrigger
tpc_parEcrEnableRetrigger = _TpcAccess.tpc_parEcrEnableRetrigger
tpc_parInputMode = _TpcAccess.tpc_parInputMode
tpc_parTriggerOnly = _TpcAccess.tpc_parTriggerOnly
tpc_parInputCoupling = _TpcAccess.tpc_parInputCoupling
tpc_parRange = _TpcAccess.tpc_parRange
tpc_parOffset = _TpcAccess.tpc_parOffset
tpc_parInvert = _TpcAccess.tpc_parInvert
tpc_parIEPECurrent = _TpcAccess.tpc_parIEPECurrent
tpc_parFilterMode = _TpcAccess.tpc_parFilterMode
tpc_parFilterFreq = _TpcAccess.tpc_parFilterFreq
tpc_parAveragingMode = _TpcAccess.tpc_parAveragingMode
tpc_parPhysFactor = _TpcAccess.tpc_parPhysFactor
tpc_parPhysConstant = _TpcAccess.tpc_parPhysConstant
tpc_parTrgMode = _TpcAccess.tpc_parTrgMode
tpc_parTrgComparatorMode = _TpcAccess.tpc_parTrgComparatorMode
tpc_parTrgLevelA = _TpcAccess.tpc_parTrgLevelA
tpc_parTrgLevelB = _TpcAccess.tpc_parTrgLevelB
tpc_parTrgTimerTSamples = _TpcAccess.tpc_parTrgTimerTSamples
tpc_parTrgPreTimerTSamples = _TpcAccess.tpc_parTrgPreTimerTSamples
tpc_parTrgSlewRateDTSamples = _TpcAccess.tpc_parTrgSlewRateDTSamples
tpc_parTrgSlewRateHysteresis = _TpcAccess.tpc_parTrgSlewRateHysteresis
tpc_parTrgSlewRateComparatorMode = _TpcAccess.tpc_parTrgSlewRateComparatorMode
tpc_parTrgComparator2Mode = _TpcAccess.tpc_parTrgComparator2Mode
tpc_parTrgLevel2A = _TpcAccess.tpc_parTrgLevel2A
tpc_parTrgLevel2B = _TpcAccess.tpc_parTrgLevel2B
tpc_parShowTrgProduct = _TpcAccess.tpc_parShowTrgProduct
tpc_parANDTriggerMask = _TpcAccess.tpc_parANDTriggerMask
tpc_parDualModeStopTrgComparatorMode = _TpcAccess.tpc_parDualModeStopTrgComparatorMode
tpc_parDualModeStopTrgLevelA = _TpcAccess.tpc_parDualModeStopTrgLevelA
tpc_parDualModeStopTrgLevelB = _TpcAccess.tpc_parDualModeStopTrgLevelB
tpc_parResetOverflow = _TpcAccess.tpc_parResetOverflow
tpc_parExternalTimebaseOutFreq = _TpcAccess.tpc_parExternalTimebaseOutFreq
tpc_parGPSSync = _TpcAccess.tpc_parGPSSync
tpc_parLXIMsgConfig = _TpcAccess.tpc_parLXIMsgConfig
tpc_parTrgDigPosSlope = _TpcAccess.tpc_parTrgDigPosSlope
tpc_parTrgDigNegSlope = _TpcAccess.tpc_parTrgDigNegSlope
tpc_ReservedParam1 = _TpcAccess.tpc_ReservedParam1
tpc_ReservedParam2 = _TpcAccess.tpc_ReservedParam2
tpc_parTrgDigPls = _TpcAccess.tpc_parTrgDigPls
tpc_parGPSMode = _TpcAccess.tpc_parGPSMode
tpc_parGPSTimer = _TpcAccess.tpc_parGPSTimer
tpc_parSyncPingMode = _TpcAccess.tpc_parSyncPingMode
tpc_parSyncDelay = _TpcAccess.tpc_parSyncDelay
tpc_parChargeMode = _TpcAccess.tpc_parChargeMode
tpc_gps_onTrigger = _TpcAccess.tpc_gps_onTrigger
tpc_gps_Continuous = _TpcAccess.tpc_gps_Continuous
tpc_opModeScope = _TpcAccess.tpc_opModeScope
tpc_opModeBlock = _TpcAccess.tpc_opModeBlock
tpc_opModeContinuous = _TpcAccess.tpc_opModeContinuous
tpc_opModeSingleBlock = _TpcAccess.tpc_opModeSingleBlock
tpc_opModeEventRecorderSingle = _TpcAccess.tpc_opModeEventRecorderSingle
tpc_opModeEventRecorderSingleDual = _TpcAccess.tpc_opModeEventRecorderSingleDual
tpc_opModeEventRecorderMulti = _TpcAccess.tpc_opModeEventRecorderMulti
tpc_opModeEventRecorderMultiDual = _TpcAccess.tpc_opModeEventRecorderMultiDual
tpc_tbSrcInternal = _TpcAccess.tpc_tbSrcInternal
tpc_tbSrcExternal = _TpcAccess.tpc_tbSrcExternal
tpc_extTrgOff = _TpcAccess.tpc_extTrgOff
tpc_extTrgPosSlope = _TpcAccess.tpc_extTrgPosSlope
tpc_extTrgNegSlope = _TpcAccess.tpc_extTrgNegSlope
tpc_inpOff = _TpcAccess.tpc_inpOff
tpc_inpSingleEnded = _TpcAccess.tpc_inpSingleEnded
tpc_inpDifferential = _TpcAccess.tpc_inpDifferential
tpc_inpCouplingDC = _TpcAccess.tpc_inpCouplingDC
tpc_inpCouplingAC = _TpcAccess.tpc_inpCouplingAC
tpc_inpCouplingICP = _TpcAccess.tpc_inpCouplingICP
tpc_inpCouplingDC50 = _TpcAccess.tpc_inpCouplingDC50
tpc_inpCouplingAC50 = _TpcAccess.tpc_inpCouplingAC50
tpc_inpCouplingCharge = _TpcAccess.tpc_inpCouplingCharge
tpc_avgOff = _TpcAccess.tpc_avgOff
tpc_avg14bit = _TpcAccess.tpc_avg14bit
tpc_avg16bit = _TpcAccess.tpc_avg16bit
tpc_inpFilterOff = _TpcAccess.tpc_inpFilterOff
tpc_inpFilterRC1 = _TpcAccess.tpc_inpFilterRC1
tpc_inpFilterRC2 = _TpcAccess.tpc_inpFilterRC2
tpc_inpFilterModule = _TpcAccess.tpc_inpFilterModule
tpc_trgMasterDisable = _TpcAccess.tpc_trgMasterDisable
tpc_trgBasic = _TpcAccess.tpc_trgBasic
tpc_trgInputMultiplier = _TpcAccess.tpc_trgInputMultiplier
tpc_trgSlewRate = _TpcAccess.tpc_trgSlewRate
tpc_trgTimerOff = _TpcAccess.tpc_trgTimerOff
tpc_trgLongPulse = _TpcAccess.tpc_trgLongPulse
tpc_trgShortPulse = _TpcAccess.tpc_trgShortPulse
tpc_trgLongPeriod = _TpcAccess.tpc_trgLongPeriod
tpc_trgShortPeriod = _TpcAccess.tpc_trgShortPeriod
tpc_trgEqualPulse = _TpcAccess.tpc_trgEqualPulse
tpc_trgNotEqualPulse = _TpcAccess.tpc_trgNotEqualPulse
tpc_trgLongDelay = _TpcAccess.tpc_trgLongDelay
tpc_trgShortDelay = _TpcAccess.tpc_trgShortDelay
tpc_trgEqualDelay = _TpcAccess.tpc_trgEqualDelay
tpc_trgNotEqualDelay = _TpcAccess.tpc_trgNotEqualDelay
tpc_trgEqualPeriod = _TpcAccess.tpc_trgEqualPeriod
tpc_trgNotEqualPeriod = _TpcAccess.tpc_trgNotEqualPeriod
tpc_trgTimerMask = _TpcAccess.tpc_trgTimerMask
tpc_trgLongPulseTwoComp = _TpcAccess.tpc_trgLongPulseTwoComp
tpc_trgShortPulseTwoComp = _TpcAccess.tpc_trgShortPulseTwoComp
tpc_trgTwoComparatorsOr = _TpcAccess.tpc_trgTwoComparatorsOr
tpc_trgTwoComparatorsAnd = _TpcAccess.tpc_trgTwoComparatorsAnd
tpc_trgTwoComparatorsMask = _TpcAccess.tpc_trgTwoComparatorsMask
tpc_trgCompOff = _TpcAccess.tpc_trgCompOff
tpc_trgCompPositiveSlope = _TpcAccess.tpc_trgCompPositiveSlope
tpc_trgCompNegativeSlope = _TpcAccess.tpc_trgCompNegativeSlope
tpc_trgCompBothSlopes = _TpcAccess.tpc_trgCompBothSlopes
tpc_trgCompWindowOut = _TpcAccess.tpc_trgCompWindowOut
tpc_trgCompWindowIn = _TpcAccess.tpc_trgCompWindowIn
tpc_trgCompStateWindowOut = _TpcAccess.tpc_trgCompStateWindowOut
tpc_trgCompStateWindowIn = _TpcAccess.tpc_trgCompStateWindowIn
tpc_etrgOff = _TpcAccess.tpc_etrgOff
tpc_etrgSlope = _TpcAccess.tpc_etrgSlope
tpc_etrgWindow = _TpcAccess.tpc_etrgWindow
tpc_etrgState = _TpcAccess.tpc_etrgState
tpc_etrgSlewRate = _TpcAccess.tpc_etrgSlewRate
tpc_etrgLongPulse = _TpcAccess.tpc_etrgLongPulse
tpc_etrgShortPulse = _TpcAccess.tpc_etrgShortPulse
tpc_etrgLongPeriod = _TpcAccess.tpc_etrgLongPeriod
tpc_etrgShortPeriod = _TpcAccess.tpc_etrgShortPeriod
tpc_etrgLongDelay = _TpcAccess.tpc_etrgLongDelay
tpc_etrgShortDelay = _TpcAccess.tpc_etrgShortDelay
tpc_etrgEqualPulse = _TpcAccess.tpc_etrgEqualPulse
tpc_etrgNotEqualPulse = _TpcAccess.tpc_etrgNotEqualPulse
tpc_etrgEqualPeriod = _TpcAccess.tpc_etrgEqualPeriod
tpc_etrgNotEqualPeriod = _TpcAccess.tpc_etrgNotEqualPeriod
tpc_etrgEqualDelay = _TpcAccess.tpc_etrgEqualDelay
tpc_etrgNotEqualDelay = _TpcAccess.tpc_etrgNotEqualDelay
tpc_etrgCompPositive = _TpcAccess.tpc_etrgCompPositive
tpc_etrgCompNegative = _TpcAccess.tpc_etrgCompNegative
tpc_etrgCompBoth = _TpcAccess.tpc_etrgCompBoth
tpc_etrgNone = _TpcAccess.tpc_etrgNone
tpc_etrgANDGroup1 = _TpcAccess.tpc_etrgANDGroup1
tpc_etrgANDGroup2 = _TpcAccess.tpc_etrgANDGroup2
tpc_etrgANDGroup3 = _TpcAccess.tpc_etrgANDGroup3
tpc_etrgANDGroup4 = _TpcAccess.tpc_etrgANDGroup4
tpc_etrgInputMultiplier = _TpcAccess.tpc_etrgInputMultiplier
tpc_etrgShowMultipliedSignal = _TpcAccess.tpc_etrgShowMultipliedSignal
tpc_etrgSetMasterDisable = _TpcAccess.tpc_etrgSetMasterDisable
tpc_etrgIgnoreLevelAndTime = _TpcAccess.tpc_etrgIgnoreLevelAndTime
tpc_invOff = _TpcAccess.tpc_invOff
tpc_invAnalog = _TpcAccess.tpc_invAnalog
tpc_invM1 = _TpcAccess.tpc_invM1
tpc_invM2 = _TpcAccess.tpc_invM2
tpc_serTrgProtNone = _TpcAccess.tpc_serTrgProtNone
tpc_serTrgProtI2C = _TpcAccess.tpc_serTrgProtI2C
tpc_serTrgProtCAN = _TpcAccess.tpc_serTrgProtCAN
tpc_serTrgMarker1 = _TpcAccess.tpc_serTrgMarker1
tpc_serTrgMarker2 = _TpcAccess.tpc_serTrgMarker2
tpc_serTrgAnalog = _TpcAccess.tpc_serTrgAnalog
tpc_i2cEveryStart = _TpcAccess.tpc_i2cEveryStart
tpc_i2cEveryStop = _TpcAccess.tpc_i2cEveryStop
tpc_i2cEveryRestart = _TpcAccess.tpc_i2cEveryRestart
tpc_i2cEveryNack = _TpcAccess.tpc_i2cEveryNack
tpc_i2cAddress = _TpcAccess.tpc_i2cAddress
tpc_i2cAddressAndData = _TpcAccess.tpc_i2cAddressAndData
tpc_i2cRWIgnore = _TpcAccess.tpc_i2cRWIgnore
tpc_i2cRead = _TpcAccess.tpc_i2cRead
tpc_i2cWrite = _TpcAccess.tpc_i2cWrite
tpc_i2cAdr7Bit = _TpcAccess.tpc_i2cAdr7Bit
tpc_i2cAdr10Bit = _TpcAccess.tpc_i2cAdr10Bit
tpc_i2cAckIgnore = _TpcAccess.tpc_i2cAckIgnore
tpc_i2cAck = _TpcAccess.tpc_i2cAck
tpc_i2cNack = _TpcAccess.tpc_i2cNack
tpc_canEveryFrame = _TpcAccess.tpc_canEveryFrame
tpc_canRemote = _TpcAccess.tpc_canRemote
tpc_canId = _TpcAccess.tpc_canId
tpc_canIdAndData = _TpcAccess.tpc_canIdAndData
tpc_canError = _TpcAccess.tpc_canError
tpc_canIdStandard = _TpcAccess.tpc_canIdStandard
tpc_canIdExtended = _TpcAccess.tpc_canIdExtended
tpc_canIdBoth = _TpcAccess.tpc_canIdBoth
class TPC_I2CTriggerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_I2CTriggerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_I2CTriggerSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _TpcAccess.TPC_I2CTriggerSettings_mode_set
    __swig_getmethods__["mode"] = _TpcAccess.TPC_I2CTriggerSettings_mode_get
    if _newclass:
        mode = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_mode_get, _TpcAccess.TPC_I2CTriggerSettings_mode_set)
    __swig_setmethods__["chDataInputNumber"] = _TpcAccess.TPC_I2CTriggerSettings_chDataInputNumber_set
    __swig_getmethods__["chDataInputNumber"] = _TpcAccess.TPC_I2CTriggerSettings_chDataInputNumber_get
    if _newclass:
        chDataInputNumber = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chDataInputNumber_get, _TpcAccess.TPC_I2CTriggerSettings_chDataInputNumber_set)
    __swig_setmethods__["chDataInputSignal"] = _TpcAccess.TPC_I2CTriggerSettings_chDataInputSignal_set
    __swig_getmethods__["chDataInputSignal"] = _TpcAccess.TPC_I2CTriggerSettings_chDataInputSignal_get
    if _newclass:
        chDataInputSignal = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chDataInputSignal_get, _TpcAccess.TPC_I2CTriggerSettings_chDataInputSignal_set)
    __swig_setmethods__["chDataLevelL"] = _TpcAccess.TPC_I2CTriggerSettings_chDataLevelL_set
    __swig_getmethods__["chDataLevelL"] = _TpcAccess.TPC_I2CTriggerSettings_chDataLevelL_get
    if _newclass:
        chDataLevelL = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chDataLevelL_get, _TpcAccess.TPC_I2CTriggerSettings_chDataLevelL_set)
    __swig_setmethods__["chDataLevelH"] = _TpcAccess.TPC_I2CTriggerSettings_chDataLevelH_set
    __swig_getmethods__["chDataLevelH"] = _TpcAccess.TPC_I2CTriggerSettings_chDataLevelH_get
    if _newclass:
        chDataLevelH = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chDataLevelH_get, _TpcAccess.TPC_I2CTriggerSettings_chDataLevelH_set)
    __swig_setmethods__["chClockInputNumber"] = _TpcAccess.TPC_I2CTriggerSettings_chClockInputNumber_set
    __swig_getmethods__["chClockInputNumber"] = _TpcAccess.TPC_I2CTriggerSettings_chClockInputNumber_get
    if _newclass:
        chClockInputNumber = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chClockInputNumber_get, _TpcAccess.TPC_I2CTriggerSettings_chClockInputNumber_set)
    __swig_setmethods__["chClockInputSignal"] = _TpcAccess.TPC_I2CTriggerSettings_chClockInputSignal_set
    __swig_getmethods__["chClockInputSignal"] = _TpcAccess.TPC_I2CTriggerSettings_chClockInputSignal_get
    if _newclass:
        chClockInputSignal = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chClockInputSignal_get, _TpcAccess.TPC_I2CTriggerSettings_chClockInputSignal_set)
    __swig_setmethods__["chClockLevelL"] = _TpcAccess.TPC_I2CTriggerSettings_chClockLevelL_set
    __swig_getmethods__["chClockLevelL"] = _TpcAccess.TPC_I2CTriggerSettings_chClockLevelL_get
    if _newclass:
        chClockLevelL = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chClockLevelL_get, _TpcAccess.TPC_I2CTriggerSettings_chClockLevelL_set)
    __swig_setmethods__["chClockLevelH"] = _TpcAccess.TPC_I2CTriggerSettings_chClockLevelH_set
    __swig_getmethods__["chClockLevelH"] = _TpcAccess.TPC_I2CTriggerSettings_chClockLevelH_get
    if _newclass:
        chClockLevelH = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_chClockLevelH_get, _TpcAccess.TPC_I2CTriggerSettings_chClockLevelH_set)
    __swig_setmethods__["ack"] = _TpcAccess.TPC_I2CTriggerSettings_ack_set
    __swig_getmethods__["ack"] = _TpcAccess.TPC_I2CTriggerSettings_ack_get
    if _newclass:
        ack = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_ack_get, _TpcAccess.TPC_I2CTriggerSettings_ack_set)
    __swig_setmethods__["adrRWBit"] = _TpcAccess.TPC_I2CTriggerSettings_adrRWBit_set
    __swig_getmethods__["adrRWBit"] = _TpcAccess.TPC_I2CTriggerSettings_adrRWBit_get
    if _newclass:
        adrRWBit = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrRWBit_get, _TpcAccess.TPC_I2CTriggerSettings_adrRWBit_set)
    __swig_setmethods__["adrType"] = _TpcAccess.TPC_I2CTriggerSettings_adrType_set
    __swig_getmethods__["adrType"] = _TpcAccess.TPC_I2CTriggerSettings_adrType_get
    if _newclass:
        adrType = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrType_get, _TpcAccess.TPC_I2CTriggerSettings_adrType_set)
    __swig_setmethods__["adrInRange"] = _TpcAccess.TPC_I2CTriggerSettings_adrInRange_set
    __swig_getmethods__["adrInRange"] = _TpcAccess.TPC_I2CTriggerSettings_adrInRange_get
    if _newclass:
        adrInRange = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrInRange_get, _TpcAccess.TPC_I2CTriggerSettings_adrInRange_set)
    __swig_setmethods__["adrLow"] = _TpcAccess.TPC_I2CTriggerSettings_adrLow_set
    __swig_getmethods__["adrLow"] = _TpcAccess.TPC_I2CTriggerSettings_adrLow_get
    if _newclass:
        adrLow = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrLow_get, _TpcAccess.TPC_I2CTriggerSettings_adrLow_set)
    __swig_setmethods__["adrHigh"] = _TpcAccess.TPC_I2CTriggerSettings_adrHigh_set
    __swig_getmethods__["adrHigh"] = _TpcAccess.TPC_I2CTriggerSettings_adrHigh_get
    if _newclass:
        adrHigh = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrHigh_get, _TpcAccess.TPC_I2CTriggerSettings_adrHigh_set)
    __swig_setmethods__["adrMask"] = _TpcAccess.TPC_I2CTriggerSettings_adrMask_set
    __swig_getmethods__["adrMask"] = _TpcAccess.TPC_I2CTriggerSettings_adrMask_get
    if _newclass:
        adrMask = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_adrMask_get, _TpcAccess.TPC_I2CTriggerSettings_adrMask_set)
    __swig_setmethods__["dataStartByte"] = _TpcAccess.TPC_I2CTriggerSettings_dataStartByte_set
    __swig_getmethods__["dataStartByte"] = _TpcAccess.TPC_I2CTriggerSettings_dataStartByte_get
    if _newclass:
        dataStartByte = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataStartByte_get, _TpcAccess.TPC_I2CTriggerSettings_dataStartByte_set)
    __swig_setmethods__["dataLength"] = _TpcAccess.TPC_I2CTriggerSettings_dataLength_set
    __swig_getmethods__["dataLength"] = _TpcAccess.TPC_I2CTriggerSettings_dataLength_get
    if _newclass:
        dataLength = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataLength_get, _TpcAccess.TPC_I2CTriggerSettings_dataLength_set)
    __swig_setmethods__["dataInRange"] = _TpcAccess.TPC_I2CTriggerSettings_dataInRange_set
    __swig_getmethods__["dataInRange"] = _TpcAccess.TPC_I2CTriggerSettings_dataInRange_get
    if _newclass:
        dataInRange = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataInRange_get, _TpcAccess.TPC_I2CTriggerSettings_dataInRange_set)
    __swig_setmethods__["dataLow"] = _TpcAccess.TPC_I2CTriggerSettings_dataLow_set
    __swig_getmethods__["dataLow"] = _TpcAccess.TPC_I2CTriggerSettings_dataLow_get
    if _newclass:
        dataLow = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataLow_get, _TpcAccess.TPC_I2CTriggerSettings_dataLow_set)
    __swig_setmethods__["dataHigh"] = _TpcAccess.TPC_I2CTriggerSettings_dataHigh_set
    __swig_getmethods__["dataHigh"] = _TpcAccess.TPC_I2CTriggerSettings_dataHigh_get
    if _newclass:
        dataHigh = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataHigh_get, _TpcAccess.TPC_I2CTriggerSettings_dataHigh_set)
    __swig_setmethods__["dataMask"] = _TpcAccess.TPC_I2CTriggerSettings_dataMask_set
    __swig_getmethods__["dataMask"] = _TpcAccess.TPC_I2CTriggerSettings_dataMask_get
    if _newclass:
        dataMask = _swig_property(_TpcAccess.TPC_I2CTriggerSettings_dataMask_get, _TpcAccess.TPC_I2CTriggerSettings_dataMask_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_I2CTriggerSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_I2CTriggerSettings
    __del__ = lambda self: None
TPC_I2CTriggerSettings_swigregister = _TpcAccess.TPC_I2CTriggerSettings_swigregister
TPC_I2CTriggerSettings_swigregister(TPC_I2CTriggerSettings)

class TPC_CANTriggerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_CANTriggerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_CANTriggerSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _TpcAccess.TPC_CANTriggerSettings_mode_set
    __swig_getmethods__["mode"] = _TpcAccess.TPC_CANTriggerSettings_mode_get
    if _newclass:
        mode = _swig_property(_TpcAccess.TPC_CANTriggerSettings_mode_get, _TpcAccess.TPC_CANTriggerSettings_mode_set)
    __swig_setmethods__["chDataInputNumber"] = _TpcAccess.TPC_CANTriggerSettings_chDataInputNumber_set
    __swig_getmethods__["chDataInputNumber"] = _TpcAccess.TPC_CANTriggerSettings_chDataInputNumber_get
    if _newclass:
        chDataInputNumber = _swig_property(_TpcAccess.TPC_CANTriggerSettings_chDataInputNumber_get, _TpcAccess.TPC_CANTriggerSettings_chDataInputNumber_set)
    __swig_setmethods__["chDataInputSignal"] = _TpcAccess.TPC_CANTriggerSettings_chDataInputSignal_set
    __swig_getmethods__["chDataInputSignal"] = _TpcAccess.TPC_CANTriggerSettings_chDataInputSignal_get
    if _newclass:
        chDataInputSignal = _swig_property(_TpcAccess.TPC_CANTriggerSettings_chDataInputSignal_get, _TpcAccess.TPC_CANTriggerSettings_chDataInputSignal_set)
    __swig_setmethods__["chDataLevelL"] = _TpcAccess.TPC_CANTriggerSettings_chDataLevelL_set
    __swig_getmethods__["chDataLevelL"] = _TpcAccess.TPC_CANTriggerSettings_chDataLevelL_get
    if _newclass:
        chDataLevelL = _swig_property(_TpcAccess.TPC_CANTriggerSettings_chDataLevelL_get, _TpcAccess.TPC_CANTriggerSettings_chDataLevelL_set)
    __swig_setmethods__["chDataLevelH"] = _TpcAccess.TPC_CANTriggerSettings_chDataLevelH_set
    __swig_getmethods__["chDataLevelH"] = _TpcAccess.TPC_CANTriggerSettings_chDataLevelH_get
    if _newclass:
        chDataLevelH = _swig_property(_TpcAccess.TPC_CANTriggerSettings_chDataLevelH_get, _TpcAccess.TPC_CANTriggerSettings_chDataLevelH_set)
    __swig_setmethods__["bitRate"] = _TpcAccess.TPC_CANTriggerSettings_bitRate_set
    __swig_getmethods__["bitRate"] = _TpcAccess.TPC_CANTriggerSettings_bitRate_get
    if _newclass:
        bitRate = _swig_property(_TpcAccess.TPC_CANTriggerSettings_bitRate_get, _TpcAccess.TPC_CANTriggerSettings_bitRate_set)
    __swig_setmethods__["bitSamplePoint"] = _TpcAccess.TPC_CANTriggerSettings_bitSamplePoint_set
    __swig_getmethods__["bitSamplePoint"] = _TpcAccess.TPC_CANTriggerSettings_bitSamplePoint_get
    if _newclass:
        bitSamplePoint = _swig_property(_TpcAccess.TPC_CANTriggerSettings_bitSamplePoint_get, _TpcAccess.TPC_CANTriggerSettings_bitSamplePoint_set)
    __swig_setmethods__["idFormat"] = _TpcAccess.TPC_CANTriggerSettings_idFormat_set
    __swig_getmethods__["idFormat"] = _TpcAccess.TPC_CANTriggerSettings_idFormat_get
    if _newclass:
        idFormat = _swig_property(_TpcAccess.TPC_CANTriggerSettings_idFormat_get, _TpcAccess.TPC_CANTriggerSettings_idFormat_set)
    __swig_setmethods__["idInRange"] = _TpcAccess.TPC_CANTriggerSettings_idInRange_set
    __swig_getmethods__["idInRange"] = _TpcAccess.TPC_CANTriggerSettings_idInRange_get
    if _newclass:
        idInRange = _swig_property(_TpcAccess.TPC_CANTriggerSettings_idInRange_get, _TpcAccess.TPC_CANTriggerSettings_idInRange_set)
    __swig_setmethods__["idLow"] = _TpcAccess.TPC_CANTriggerSettings_idLow_set
    __swig_getmethods__["idLow"] = _TpcAccess.TPC_CANTriggerSettings_idLow_get
    if _newclass:
        idLow = _swig_property(_TpcAccess.TPC_CANTriggerSettings_idLow_get, _TpcAccess.TPC_CANTriggerSettings_idLow_set)
    __swig_setmethods__["idHigh"] = _TpcAccess.TPC_CANTriggerSettings_idHigh_set
    __swig_getmethods__["idHigh"] = _TpcAccess.TPC_CANTriggerSettings_idHigh_get
    if _newclass:
        idHigh = _swig_property(_TpcAccess.TPC_CANTriggerSettings_idHigh_get, _TpcAccess.TPC_CANTriggerSettings_idHigh_set)
    __swig_setmethods__["idMask"] = _TpcAccess.TPC_CANTriggerSettings_idMask_set
    __swig_getmethods__["idMask"] = _TpcAccess.TPC_CANTriggerSettings_idMask_get
    if _newclass:
        idMask = _swig_property(_TpcAccess.TPC_CANTriggerSettings_idMask_get, _TpcAccess.TPC_CANTriggerSettings_idMask_set)
    __swig_setmethods__["dataLength"] = _TpcAccess.TPC_CANTriggerSettings_dataLength_set
    __swig_getmethods__["dataLength"] = _TpcAccess.TPC_CANTriggerSettings_dataLength_get
    if _newclass:
        dataLength = _swig_property(_TpcAccess.TPC_CANTriggerSettings_dataLength_get, _TpcAccess.TPC_CANTriggerSettings_dataLength_set)
    __swig_setmethods__["dataInRange"] = _TpcAccess.TPC_CANTriggerSettings_dataInRange_set
    __swig_getmethods__["dataInRange"] = _TpcAccess.TPC_CANTriggerSettings_dataInRange_get
    if _newclass:
        dataInRange = _swig_property(_TpcAccess.TPC_CANTriggerSettings_dataInRange_get, _TpcAccess.TPC_CANTriggerSettings_dataInRange_set)
    __swig_setmethods__["dataLow"] = _TpcAccess.TPC_CANTriggerSettings_dataLow_set
    __swig_getmethods__["dataLow"] = _TpcAccess.TPC_CANTriggerSettings_dataLow_get
    if _newclass:
        dataLow = _swig_property(_TpcAccess.TPC_CANTriggerSettings_dataLow_get, _TpcAccess.TPC_CANTriggerSettings_dataLow_set)
    __swig_setmethods__["dataHigh"] = _TpcAccess.TPC_CANTriggerSettings_dataHigh_set
    __swig_getmethods__["dataHigh"] = _TpcAccess.TPC_CANTriggerSettings_dataHigh_get
    if _newclass:
        dataHigh = _swig_property(_TpcAccess.TPC_CANTriggerSettings_dataHigh_get, _TpcAccess.TPC_CANTriggerSettings_dataHigh_set)
    __swig_setmethods__["dataMask"] = _TpcAccess.TPC_CANTriggerSettings_dataMask_set
    __swig_getmethods__["dataMask"] = _TpcAccess.TPC_CANTriggerSettings_dataMask_get
    if _newclass:
        dataMask = _swig_property(_TpcAccess.TPC_CANTriggerSettings_dataMask_get, _TpcAccess.TPC_CANTriggerSettings_dataMask_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_CANTriggerSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_CANTriggerSettings
    __del__ = lambda self: None
TPC_CANTriggerSettings_swigregister = _TpcAccess.TPC_CANTriggerSettings_swigregister
TPC_CANTriggerSettings_swigregister(TPC_CANTriggerSettings)


def TPC_SetParameter(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', parameter: 'enum TPC_Parameter', value: 'double') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetParameter(deviceIx, boardAddress, inputNumber, parameter, value)
TPC_SetParameter = _TpcAccess.TPC_SetParameter

def TPC_GetParameter(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', parameter: 'enum TPC_Parameter') -> "double *":
    return _TpcAccess.TPC_GetParameter(deviceIx, boardAddress, inputNumber, parameter)
TPC_GetParameter = _TpcAccess.TPC_GetParameter

def TPC_SetAttribute(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', key: 'char const *', value: 'char const *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetAttribute(deviceIx, boardAddress, inputNumber, key, value)
TPC_SetAttribute = _TpcAccess.TPC_SetAttribute

def TPC_GetAttribute(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', key: 'char const *', buffer: 'char *', maxLen: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetAttribute(deviceIx, boardAddress, inputNumber, key, buffer, maxLen)
TPC_GetAttribute = _TpcAccess.TPC_GetAttribute

def TPC_GetAllAttributes(deviceIx: 'int', callback: 'TPC_AttributeEnumeratorCallback', userData: 'void *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetAllAttributes(deviceIx, callback, userData)
TPC_GetAllAttributes = _TpcAccess.TPC_GetAllAttributes
class TPC_AssociatedChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_AssociatedChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_AssociatedChannel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["boardAddress"] = _TpcAccess.TPC_AssociatedChannel_boardAddress_set
    __swig_getmethods__["boardAddress"] = _TpcAccess.TPC_AssociatedChannel_boardAddress_get
    if _newclass:
        boardAddress = _swig_property(_TpcAccess.TPC_AssociatedChannel_boardAddress_get, _TpcAccess.TPC_AssociatedChannel_boardAddress_set)
    __swig_setmethods__["inputNumber"] = _TpcAccess.TPC_AssociatedChannel_inputNumber_set
    __swig_getmethods__["inputNumber"] = _TpcAccess.TPC_AssociatedChannel_inputNumber_get
    if _newclass:
        inputNumber = _swig_property(_TpcAccess.TPC_AssociatedChannel_inputNumber_get, _TpcAccess.TPC_AssociatedChannel_inputNumber_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_AssociatedChannel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_AssociatedChannel
    __del__ = lambda self: None
TPC_AssociatedChannel_swigregister = _TpcAccess.TPC_AssociatedChannel_swigregister
TPC_AssociatedChannel_swigregister(TPC_AssociatedChannel)


def TPC_GetAssociatedChannels(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', list: 'TPC_AssociatedChannel', count: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetAssociatedChannels(deviceIx, boardAddress, inputNumber, list, count)
TPC_GetAssociatedChannels = _TpcAccess.TPC_GetAssociatedChannels

def TPC_SetAssociatedChannels(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', list: 'TPC_AssociatedChannel', count: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetAssociatedChannels(deviceIx, boardAddress, inputNumber, list, count)
TPC_SetAssociatedChannels = _TpcAccess.TPC_SetAssociatedChannels

def TPC_BeginSet() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_BeginSet()
TPC_BeginSet = _TpcAccess.TPC_BeginSet

def TPC_EndSet() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_EndSet()
TPC_EndSet = _TpcAccess.TPC_EndSet

def TPC_CancelSet() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_CancelSet()
TPC_CancelSet = _TpcAccess.TPC_CancelSet

def TPC_SetTrigger(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', mode: 'TPC_EasyTriggerMode', compMode: 'TPC_EasyTriggerComperatorMode', flags: 'TPC_EasyTriggerFlags', level: 'double', hysteresis: 'double', time: 'int'=0, time2: 'int'=0) -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetTrigger(deviceIx, boardAddress, inputNumber, mode, compMode, flags, level, hysteresis, time, time2)
TPC_SetTrigger = _TpcAccess.TPC_SetTrigger

def TPC_GetTrigger(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', mode: 'TPC_EasyTriggerMode *', compMode: 'TPC_EasyTriggerComperatorMode *', flags: 'TPC_EasyTriggerFlags *', level: 'double *', hysteresis: 'double *', time: 'int *', time2: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetTrigger(deviceIx, boardAddress, inputNumber, mode, compMode, flags, level, hysteresis, time, time2)
TPC_GetTrigger = _TpcAccess.TPC_GetTrigger

def TPC_ResetSerTrg(deviceIx: 'int', boardAddress: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ResetSerTrg(deviceIx, boardAddress)
TPC_ResetSerTrg = _TpcAccess.TPC_ResetSerTrg

def TPC_GetSerTrgProtocol(deviceIx: 'int', boardAddress: 'int', protocol: 'TPC_SerialTriggerProtocol *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetSerTrgProtocol(deviceIx, boardAddress, protocol)
TPC_GetSerTrgProtocol = _TpcAccess.TPC_GetSerTrgProtocol

def TPC_SetI2CTrigger(deviceIx: 'int', boardAddress: 'int', settings: 'TPC_I2CTriggerSettings') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetI2CTrigger(deviceIx, boardAddress, settings)
TPC_SetI2CTrigger = _TpcAccess.TPC_SetI2CTrigger

def TPC_GetI2CTrigger(deviceIx: 'int', boardAddress: 'int', settings: 'TPC_I2CTriggerSettings') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetI2CTrigger(deviceIx, boardAddress, settings)
TPC_GetI2CTrigger = _TpcAccess.TPC_GetI2CTrigger

def TPC_SetCANTrigger(deviceIx: 'int', boardAddress: 'int', settings: 'TPC_CANTriggerSettings') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetCANTrigger(deviceIx, boardAddress, settings)
TPC_SetCANTrigger = _TpcAccess.TPC_SetCANTrigger

def TPC_GetCANTrigger(deviceIx: 'int', boardAddress: 'int', settings: 'TPC_CANTriggerSettings') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetCANTrigger(deviceIx, boardAddress, settings)
TPC_GetCANTrigger = _TpcAccess.TPC_GetCANTrigger
tpc_cmdStart = _TpcAccess.tpc_cmdStart
tpc_cmdStop = _TpcAccess.tpc_cmdStop
tpc_cmdDisarm = _TpcAccess.tpc_cmdDisarm
tpc_cmdArm = _TpcAccess.tpc_cmdArm
tpc_cmdTrigger = _TpcAccess.tpc_cmdTrigger
tpc_cmdReserved1 = _TpcAccess.tpc_cmdReserved1
tpc_cmdArmExtCommands = _TpcAccess.tpc_cmdArmExtCommands
tpc_cmdDisarmExtCommands = _TpcAccess.tpc_cmdDisarmExtCommands
tpc_cmdStartGPSSynced = _TpcAccess.tpc_cmdStartGPSSynced
tpc_cmdInitSync = _TpcAccess.tpc_cmdInitSync

def TPC_ExecuteSystemCommand(command: 'enum TPC_SystemCommand') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ExecuteSystemCommand(command)
TPC_ExecuteSystemCommand = _TpcAccess.TPC_ExecuteSystemCommand

def TPC_ExecuteSystemCommandSystem(id: 'int', command: 'enum TPC_SystemCommand') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ExecuteSystemCommandSystem(id, command)
TPC_ExecuteSystemCommandSystem = _TpcAccess.TPC_ExecuteSystemCommandSystem

def TPC_MakeMeasurement(timeout: 'int') -> "int *":
    return _TpcAccess.TPC_MakeMeasurement(timeout)
TPC_MakeMeasurement = _TpcAccess.TPC_MakeMeasurement

def TPC_StartCalibration(deviceIx: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_StartCalibration(deviceIx)
TPC_StartCalibration = _TpcAccess.TPC_StartCalibration
AUT_NO_SEQUENCE = _TpcAccess.AUT_NO_SEQUENCE
AUT_LOADED = _TpcAccess.AUT_LOADED
AUT_RUNNING_LS = _TpcAccess.AUT_RUNNING_LS
AUT_RUNNING_MEAS = _TpcAccess.AUT_RUNNING_MEAS
AUT_RUNNING_WEOR = _TpcAccess.AUT_RUNNING_WEOR
AUTO_RUNNING_DELAY = _TpcAccess.AUTO_RUNNING_DELAY
AUTO_RUNNING_CALIB = _TpcAccess.AUTO_RUNNING_CALIB
AUTO_RUNNING_SAVE = _TpcAccess.AUTO_RUNNING_SAVE
AUTO_STOP = _TpcAccess.AUTO_STOP
tpc_recAborted = _TpcAccess.tpc_recAborted
tpc_recStarting = _TpcAccess.tpc_recStarting
tpc_recRecording = _TpcAccess.tpc_recRecording
tpc_recStopped = _TpcAccess.tpc_recStopped
tpc_recStartError = _TpcAccess.tpc_recStartError
tpc_recDisarmed = _TpcAccess.tpc_recDisarmed
tpc_recArmed = _TpcAccess.tpc_recArmed
tpc_recTriggered = _TpcAccess.tpc_recTriggered
tpc_extStartDisarmed = _TpcAccess.tpc_extStartDisarmed
tpc_extStartArmed = _TpcAccess.tpc_extStartArmed
tpc_overloadNone = _TpcAccess.tpc_overloadNone
tpc_overloadPositive = _TpcAccess.tpc_overloadPositive
tpc_overloadNegative = _TpcAccess.tpc_overloadNegative
class TPC_InputStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_InputStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_InputStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OverloadLive"] = _TpcAccess.TPC_InputStatus_OverloadLive_set
    __swig_getmethods__["OverloadLive"] = _TpcAccess.TPC_InputStatus_OverloadLive_get
    if _newclass:
        OverloadLive = _swig_property(_TpcAccess.TPC_InputStatus_OverloadLive_get, _TpcAccess.TPC_InputStatus_OverloadLive_set)
    __swig_setmethods__["OverloadMeas"] = _TpcAccess.TPC_InputStatus_OverloadMeas_set
    __swig_getmethods__["OverloadMeas"] = _TpcAccess.TPC_InputStatus_OverloadMeas_get
    if _newclass:
        OverloadMeas = _swig_property(_TpcAccess.TPC_InputStatus_OverloadMeas_get, _TpcAccess.TPC_InputStatus_OverloadMeas_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_InputStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_InputStatus
    __del__ = lambda self: None
TPC_InputStatus_swigregister = _TpcAccess.TPC_InputStatus_swigregister
TPC_InputStatus_swigregister(TPC_InputStatus)

class TPC_BoardStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_BoardStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_BoardStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recordingState"] = _TpcAccess.TPC_BoardStatus_recordingState_set
    __swig_getmethods__["recordingState"] = _TpcAccess.TPC_BoardStatus_recordingState_get
    if _newclass:
        recordingState = _swig_property(_TpcAccess.TPC_BoardStatus_recordingState_get, _TpcAccess.TPC_BoardStatus_recordingState_set)
    __swig_setmethods__["triggerState"] = _TpcAccess.TPC_BoardStatus_triggerState_set
    __swig_getmethods__["triggerState"] = _TpcAccess.TPC_BoardStatus_triggerState_get
    if _newclass:
        triggerState = _swig_property(_TpcAccess.TPC_BoardStatus_triggerState_get, _TpcAccess.TPC_BoardStatus_triggerState_set)
    __swig_setmethods__["blockCounter"] = _TpcAccess.TPC_BoardStatus_blockCounter_set
    __swig_getmethods__["blockCounter"] = _TpcAccess.TPC_BoardStatus_blockCounter_get
    if _newclass:
        blockCounter = _swig_property(_TpcAccess.TPC_BoardStatus_blockCounter_get, _TpcAccess.TPC_BoardStatus_blockCounter_set)
    __swig_setmethods__["dataCounter"] = _TpcAccess.TPC_BoardStatus_dataCounter_set
    __swig_getmethods__["dataCounter"] = _TpcAccess.TPC_BoardStatus_dataCounter_get
    if _newclass:
        dataCounter = _swig_property(_TpcAccess.TPC_BoardStatus_dataCounter_get, _TpcAccess.TPC_BoardStatus_dataCounter_set)
    __swig_setmethods__["dataLostCounter"] = _TpcAccess.TPC_BoardStatus_dataLostCounter_set
    __swig_getmethods__["dataLostCounter"] = _TpcAccess.TPC_BoardStatus_dataLostCounter_get
    if _newclass:
        dataLostCounter = _swig_property(_TpcAccess.TPC_BoardStatus_dataLostCounter_get, _TpcAccess.TPC_BoardStatus_dataLostCounter_set)
    __swig_setmethods__["blockLostCounter"] = _TpcAccess.TPC_BoardStatus_blockLostCounter_set
    __swig_getmethods__["blockLostCounter"] = _TpcAccess.TPC_BoardStatus_blockLostCounter_get
    if _newclass:
        blockLostCounter = _swig_property(_TpcAccess.TPC_BoardStatus_blockLostCounter_get, _TpcAccess.TPC_BoardStatus_blockLostCounter_set)
    __swig_setmethods__["inputs"] = _TpcAccess.TPC_BoardStatus_inputs_set
    __swig_getmethods__["inputs"] = _TpcAccess.TPC_BoardStatus_inputs_get
    if _newclass:
        inputs = _swig_property(_TpcAccess.TPC_BoardStatus_inputs_get, _TpcAccess.TPC_BoardStatus_inputs_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_BoardStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_BoardStatus
    __del__ = lambda self: None
TPC_BoardStatus_swigregister = _TpcAccess.TPC_BoardStatus_swigregister
TPC_BoardStatus_swigregister(TPC_BoardStatus)

class TPC_GPSStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_GPSStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_GPSStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["locked"] = _TpcAccess.TPC_GPSStatus_locked_set
    __swig_getmethods__["locked"] = _TpcAccess.TPC_GPSStatus_locked_get
    if _newclass:
        locked = _swig_property(_TpcAccess.TPC_GPSStatus_locked_get, _TpcAccess.TPC_GPSStatus_locked_set)
    __swig_setmethods__["NrOfSatVisible"] = _TpcAccess.TPC_GPSStatus_NrOfSatVisible_set
    __swig_getmethods__["NrOfSatVisible"] = _TpcAccess.TPC_GPSStatus_NrOfSatVisible_get
    if _newclass:
        NrOfSatVisible = _swig_property(_TpcAccess.TPC_GPSStatus_NrOfSatVisible_get, _TpcAccess.TPC_GPSStatus_NrOfSatVisible_set)
    __swig_setmethods__["gpsTime"] = _TpcAccess.TPC_GPSStatus_gpsTime_set
    __swig_getmethods__["gpsTime"] = _TpcAccess.TPC_GPSStatus_gpsTime_get
    if _newclass:
        gpsTime = _swig_property(_TpcAccess.TPC_GPSStatus_gpsTime_get, _TpcAccess.TPC_GPSStatus_gpsTime_set)
    __swig_setmethods__["lastFrame"] = _TpcAccess.TPC_GPSStatus_lastFrame_set
    __swig_getmethods__["lastFrame"] = _TpcAccess.TPC_GPSStatus_lastFrame_get
    if _newclass:
        lastFrame = _swig_property(_TpcAccess.TPC_GPSStatus_lastFrame_get, _TpcAccess.TPC_GPSStatus_lastFrame_set)
    __swig_setmethods__["nrOfloggedPositions"] = _TpcAccess.TPC_GPSStatus_nrOfloggedPositions_set
    __swig_getmethods__["nrOfloggedPositions"] = _TpcAccess.TPC_GPSStatus_nrOfloggedPositions_get
    if _newclass:
        nrOfloggedPositions = _swig_property(_TpcAccess.TPC_GPSStatus_nrOfloggedPositions_get, _TpcAccess.TPC_GPSStatus_nrOfloggedPositions_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_GPSStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_GPSStatus
    __del__ = lambda self: None
TPC_GPSStatus_swigregister = _TpcAccess.TPC_GPSStatus_swigregister
TPC_GPSStatus_swigregister(TPC_GPSStatus)

class TPC_TempStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_TempStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_TempStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CPUTemp"] = _TpcAccess.TPC_TempStatus_CPUTemp_set
    __swig_getmethods__["CPUTemp"] = _TpcAccess.TPC_TempStatus_CPUTemp_get
    if _newclass:
        CPUTemp = _swig_property(_TpcAccess.TPC_TempStatus_CPUTemp_get, _TpcAccess.TPC_TempStatus_CPUTemp_set)
    __swig_setmethods__["BoardTemp"] = _TpcAccess.TPC_TempStatus_BoardTemp_set
    __swig_getmethods__["BoardTemp"] = _TpcAccess.TPC_TempStatus_BoardTemp_get
    if _newclass:
        BoardTemp = _swig_property(_TpcAccess.TPC_TempStatus_BoardTemp_get, _TpcAccess.TPC_TempStatus_BoardTemp_set)
    __swig_setmethods__["Res1Temp"] = _TpcAccess.TPC_TempStatus_Res1Temp_set
    __swig_getmethods__["Res1Temp"] = _TpcAccess.TPC_TempStatus_Res1Temp_get
    if _newclass:
        Res1Temp = _swig_property(_TpcAccess.TPC_TempStatus_Res1Temp_get, _TpcAccess.TPC_TempStatus_Res1Temp_set)
    __swig_setmethods__["Res2Temp"] = _TpcAccess.TPC_TempStatus_Res2Temp_set
    __swig_getmethods__["Res2Temp"] = _TpcAccess.TPC_TempStatus_Res2Temp_get
    if _newclass:
        Res2Temp = _swig_property(_TpcAccess.TPC_TempStatus_Res2Temp_get, _TpcAccess.TPC_TempStatus_Res2Temp_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_TempStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_TempStatus
    __del__ = lambda self: None
TPC_TempStatus_swigregister = _TpcAccess.TPC_TempStatus_swigregister
TPC_TempStatus_swigregister(TPC_TempStatus)

class TPC_DeviceStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_DeviceStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_DeviceStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceError"] = _TpcAccess.TPC_DeviceStatus_deviceError_set
    __swig_getmethods__["deviceError"] = _TpcAccess.TPC_DeviceStatus_deviceError_get
    if _newclass:
        deviceError = _swig_property(_TpcAccess.TPC_DeviceStatus_deviceError_get, _TpcAccess.TPC_DeviceStatus_deviceError_set)
    __swig_setmethods__["measurementNumber"] = _TpcAccess.TPC_DeviceStatus_measurementNumber_set
    __swig_getmethods__["measurementNumber"] = _TpcAccess.TPC_DeviceStatus_measurementNumber_get
    if _newclass:
        measurementNumber = _swig_property(_TpcAccess.TPC_DeviceStatus_measurementNumber_get, _TpcAccess.TPC_DeviceStatus_measurementNumber_set)
    __swig_setmethods__["measurementStartTime"] = _TpcAccess.TPC_DeviceStatus_measurementStartTime_set
    __swig_getmethods__["measurementStartTime"] = _TpcAccess.TPC_DeviceStatus_measurementStartTime_get
    if _newclass:
        measurementStartTime = _swig_property(_TpcAccess.TPC_DeviceStatus_measurementStartTime_get, _TpcAccess.TPC_DeviceStatus_measurementStartTime_set)
    __swig_setmethods__["startInProgress"] = _TpcAccess.TPC_DeviceStatus_startInProgress_set
    __swig_getmethods__["startInProgress"] = _TpcAccess.TPC_DeviceStatus_startInProgress_get
    if _newclass:
        startInProgress = _swig_property(_TpcAccess.TPC_DeviceStatus_startInProgress_get, _TpcAccess.TPC_DeviceStatus_startInProgress_set)
    __swig_setmethods__["boards"] = _TpcAccess.TPC_DeviceStatus_boards_set
    __swig_getmethods__["boards"] = _TpcAccess.TPC_DeviceStatus_boards_get
    if _newclass:
        boards = _swig_property(_TpcAccess.TPC_DeviceStatus_boards_get, _TpcAccess.TPC_DeviceStatus_boards_set)
    __swig_setmethods__["settingsChangesCounter"] = _TpcAccess.TPC_DeviceStatus_settingsChangesCounter_set
    __swig_getmethods__["settingsChangesCounter"] = _TpcAccess.TPC_DeviceStatus_settingsChangesCounter_get
    if _newclass:
        settingsChangesCounter = _swig_property(_TpcAccess.TPC_DeviceStatus_settingsChangesCounter_get, _TpcAccess.TPC_DeviceStatus_settingsChangesCounter_set)
    __swig_setmethods__["clusterNrs"] = _TpcAccess.TPC_DeviceStatus_clusterNrs_set
    __swig_getmethods__["clusterNrs"] = _TpcAccess.TPC_DeviceStatus_clusterNrs_get
    if _newclass:
        clusterNrs = _swig_property(_TpcAccess.TPC_DeviceStatus_clusterNrs_get, _TpcAccess.TPC_DeviceStatus_clusterNrs_set)
    __swig_setmethods__["operationModes"] = _TpcAccess.TPC_DeviceStatus_operationModes_set
    __swig_getmethods__["operationModes"] = _TpcAccess.TPC_DeviceStatus_operationModes_get
    if _newclass:
        operationModes = _swig_property(_TpcAccess.TPC_DeviceStatus_operationModes_get, _TpcAccess.TPC_DeviceStatus_operationModes_set)
    __swig_setmethods__["autosequenceState"] = _TpcAccess.TPC_DeviceStatus_autosequenceState_set
    __swig_getmethods__["autosequenceState"] = _TpcAccess.TPC_DeviceStatus_autosequenceState_get
    if _newclass:
        autosequenceState = _swig_property(_TpcAccess.TPC_DeviceStatus_autosequenceState_get, _TpcAccess.TPC_DeviceStatus_autosequenceState_set)
    __swig_setmethods__["extStartState"] = _TpcAccess.TPC_DeviceStatus_extStartState_set
    __swig_getmethods__["extStartState"] = _TpcAccess.TPC_DeviceStatus_extStartState_get
    if _newclass:
        extStartState = _swig_property(_TpcAccess.TPC_DeviceStatus_extStartState_get, _TpcAccess.TPC_DeviceStatus_extStartState_set)
    __swig_setmethods__["gpsStatus"] = _TpcAccess.TPC_DeviceStatus_gpsStatus_set
    __swig_getmethods__["gpsStatus"] = _TpcAccess.TPC_DeviceStatus_gpsStatus_get
    if _newclass:
        gpsStatus = _swig_property(_TpcAccess.TPC_DeviceStatus_gpsStatus_get, _TpcAccess.TPC_DeviceStatus_gpsStatus_set)
    __swig_setmethods__["tempStatus"] = _TpcAccess.TPC_DeviceStatus_tempStatus_set
    __swig_getmethods__["tempStatus"] = _TpcAccess.TPC_DeviceStatus_tempStatus_get
    if _newclass:
        tempStatus = _swig_property(_TpcAccess.TPC_DeviceStatus_tempStatus_get, _TpcAccess.TPC_DeviceStatus_tempStatus_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_DeviceStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_DeviceStatus
    __del__ = lambda self: None
TPC_DeviceStatus_swigregister = _TpcAccess.TPC_DeviceStatus_swigregister
TPC_DeviceStatus_swigregister(TPC_DeviceStatus)


def TPC_GetDeviceStatus(deviceIx: 'int', status: 'TPC_DeviceStatus', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetDeviceStatus(deviceIx, status, structSize)
TPC_GetDeviceStatus = _TpcAccess.TPC_GetDeviceStatus

def TPC_SetStatusCallback(callback: 'TPC_StatusCallbackFunc', userData: 'void *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetStatusCallback(callback, userData)
TPC_SetStatusCallback = _TpcAccess.TPC_SetStatusCallback

def TPC_SetStatusCallbackSystem(id: 'int', callback: 'TPC_StatusCallbackFunc', userData: 'void *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SetStatusCallbackSystem(id, callback, userData)
TPC_SetStatusCallbackSystem = _TpcAccess.TPC_SetStatusCallbackSystem
class TPC_YMetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_YMetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_YMetaData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputActive"] = _TpcAccess.TPC_YMetaData_inputActive_set
    __swig_getmethods__["inputActive"] = _TpcAccess.TPC_YMetaData_inputActive_get
    if _newclass:
        inputActive = _swig_property(_TpcAccess.TPC_YMetaData_inputActive_get, _TpcAccess.TPC_YMetaData_inputActive_set)
    __swig_setmethods__["analogMask"] = _TpcAccess.TPC_YMetaData_analogMask_set
    __swig_getmethods__["analogMask"] = _TpcAccess.TPC_YMetaData_analogMask_get
    if _newclass:
        analogMask = _swig_property(_TpcAccess.TPC_YMetaData_analogMask_get, _TpcAccess.TPC_YMetaData_analogMask_set)
    __swig_setmethods__["markerMask"] = _TpcAccess.TPC_YMetaData_markerMask_set
    __swig_getmethods__["markerMask"] = _TpcAccess.TPC_YMetaData_markerMask_get
    if _newclass:
        markerMask = _swig_property(_TpcAccess.TPC_YMetaData_markerMask_get, _TpcAccess.TPC_YMetaData_markerMask_set)
    __swig_setmethods__["numberOfMarkerBits"] = _TpcAccess.TPC_YMetaData_numberOfMarkerBits_set
    __swig_getmethods__["numberOfMarkerBits"] = _TpcAccess.TPC_YMetaData_numberOfMarkerBits_get
    if _newclass:
        numberOfMarkerBits = _swig_property(_TpcAccess.TPC_YMetaData_numberOfMarkerBits_get, _TpcAccess.TPC_YMetaData_numberOfMarkerBits_set)
    __swig_setmethods__["resolutionInBits"] = _TpcAccess.TPC_YMetaData_resolutionInBits_set
    __swig_getmethods__["resolutionInBits"] = _TpcAccess.TPC_YMetaData_resolutionInBits_get
    if _newclass:
        resolutionInBits = _swig_property(_TpcAccess.TPC_YMetaData_resolutionInBits_get, _TpcAccess.TPC_YMetaData_resolutionInBits_set)
    __swig_setmethods__["bytesPerSample"] = _TpcAccess.TPC_YMetaData_bytesPerSample_set
    __swig_getmethods__["bytesPerSample"] = _TpcAccess.TPC_YMetaData_bytesPerSample_get
    if _newclass:
        bytesPerSample = _swig_property(_TpcAccess.TPC_YMetaData_bytesPerSample_get, _TpcAccess.TPC_YMetaData_bytesPerSample_set)
    __swig_setmethods__["binToVoltFactor"] = _TpcAccess.TPC_YMetaData_binToVoltFactor_set
    __swig_getmethods__["binToVoltFactor"] = _TpcAccess.TPC_YMetaData_binToVoltFactor_get
    if _newclass:
        binToVoltFactor = _swig_property(_TpcAccess.TPC_YMetaData_binToVoltFactor_get, _TpcAccess.TPC_YMetaData_binToVoltFactor_set)
    __swig_setmethods__["binToVoltConstant"] = _TpcAccess.TPC_YMetaData_binToVoltConstant_set
    __swig_getmethods__["binToVoltConstant"] = _TpcAccess.TPC_YMetaData_binToVoltConstant_get
    if _newclass:
        binToVoltConstant = _swig_property(_TpcAccess.TPC_YMetaData_binToVoltConstant_get, _TpcAccess.TPC_YMetaData_binToVoltConstant_set)
    __swig_setmethods__["binToPhysicalFactor"] = _TpcAccess.TPC_YMetaData_binToPhysicalFactor_set
    __swig_getmethods__["binToPhysicalFactor"] = _TpcAccess.TPC_YMetaData_binToPhysicalFactor_get
    if _newclass:
        binToPhysicalFactor = _swig_property(_TpcAccess.TPC_YMetaData_binToPhysicalFactor_get, _TpcAccess.TPC_YMetaData_binToPhysicalFactor_set)
    __swig_setmethods__["binToPhysicalConstant"] = _TpcAccess.TPC_YMetaData_binToPhysicalConstant_set
    __swig_getmethods__["binToPhysicalConstant"] = _TpcAccess.TPC_YMetaData_binToPhysicalConstant_get
    if _newclass:
        binToPhysicalConstant = _swig_property(_TpcAccess.TPC_YMetaData_binToPhysicalConstant_get, _TpcAccess.TPC_YMetaData_binToPhysicalConstant_set)
    __swig_setmethods__["voltToPhysicalFactor"] = _TpcAccess.TPC_YMetaData_voltToPhysicalFactor_set
    __swig_getmethods__["voltToPhysicalFactor"] = _TpcAccess.TPC_YMetaData_voltToPhysicalFactor_get
    if _newclass:
        voltToPhysicalFactor = _swig_property(_TpcAccess.TPC_YMetaData_voltToPhysicalFactor_get, _TpcAccess.TPC_YMetaData_voltToPhysicalFactor_set)
    __swig_setmethods__["voltToPhysicalConstant"] = _TpcAccess.TPC_YMetaData_voltToPhysicalConstant_set
    __swig_getmethods__["voltToPhysicalConstant"] = _TpcAccess.TPC_YMetaData_voltToPhysicalConstant_get
    if _newclass:
        voltToPhysicalConstant = _swig_property(_TpcAccess.TPC_YMetaData_voltToPhysicalConstant_get, _TpcAccess.TPC_YMetaData_voltToPhysicalConstant_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_YMetaData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_YMetaData
    __del__ = lambda self: None
TPC_YMetaData_swigregister = _TpcAccess.TPC_YMetaData_swigregister
TPC_YMetaData_swigregister(TPC_YMetaData)


def TPC_GetYMetaData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', measurementNumber: 'int', metaData: 'TPC_YMetaData', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetYMetaData(deviceIx, boardAddress, inputNumber, measurementNumber, metaData, structSize)
TPC_GetYMetaData = _TpcAccess.TPC_GetYMetaData

def TPC_GetMetaDataParameter(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', measurementNumber: 'int', parameter: 'enum TPC_Parameter') -> "double *":
    return _TpcAccess.TPC_GetMetaDataParameter(deviceIx, boardAddress, inputNumber, measurementNumber, parameter)
TPC_GetMetaDataParameter = _TpcAccess.TPC_GetMetaDataParameter

def TPC_GetMetaDataAttribute(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', measurementNumber: 'int', key: 'char const *', buffer: 'char *', maxLen: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetMetaDataAttribute(deviceIx, boardAddress, inputNumber, measurementNumber, key, buffer, maxLen)
TPC_GetMetaDataAttribute = _TpcAccess.TPC_GetMetaDataAttribute

def TPC_GetAllMetaDataAttributes(deviceIx: 'int', measurementNumber: 'int', callback: 'TPC_AttributeEnumeratorCallback', userData: 'void *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetAllMetaDataAttributes(deviceIx, measurementNumber, callback, userData)
TPC_GetAllMetaDataAttributes = _TpcAccess.TPC_GetAllMetaDataAttributes

def TPC_GetMetaDataAssociatedChannels(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', measurementNumber: 'int', list: 'TPC_AssociatedChannel', count: 'int *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetMetaDataAssociatedChannels(deviceIx, boardAddress, inputNumber, measurementNumber, list, count)
TPC_GetMetaDataAssociatedChannels = _TpcAccess.TPC_GetMetaDataAssociatedChannels
class TPC_TMetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPC_TMetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPC_TMetaData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["growing"] = _TpcAccess.TPC_TMetaData_growing_set
    __swig_getmethods__["growing"] = _TpcAccess.TPC_TMetaData_growing_get
    if _newclass:
        growing = _swig_property(_TpcAccess.TPC_TMetaData_growing_get, _TpcAccess.TPC_TMetaData_growing_set)
    __swig_setmethods__["timeBaseSource"] = _TpcAccess.TPC_TMetaData_timeBaseSource_set
    __swig_getmethods__["timeBaseSource"] = _TpcAccess.TPC_TMetaData_timeBaseSource_get
    if _newclass:
        timeBaseSource = _swig_property(_TpcAccess.TPC_TMetaData_timeBaseSource_get, _TpcAccess.TPC_TMetaData_timeBaseSource_set)
    __swig_setmethods__["sampleRate"] = _TpcAccess.TPC_TMetaData_sampleRate_set
    __swig_getmethods__["sampleRate"] = _TpcAccess.TPC_TMetaData_sampleRate_get
    if _newclass:
        sampleRate = _swig_property(_TpcAccess.TPC_TMetaData_sampleRate_get, _TpcAccess.TPC_TMetaData_sampleRate_set)
    __swig_setmethods__["externalClockDivisor"] = _TpcAccess.TPC_TMetaData_externalClockDivisor_set
    __swig_getmethods__["externalClockDivisor"] = _TpcAccess.TPC_TMetaData_externalClockDivisor_get
    if _newclass:
        externalClockDivisor = _swig_property(_TpcAccess.TPC_TMetaData_externalClockDivisor_get, _TpcAccess.TPC_TMetaData_externalClockDivisor_set)
    __swig_setmethods__["startTime"] = _TpcAccess.TPC_TMetaData_startTime_set
    __swig_getmethods__["startTime"] = _TpcAccess.TPC_TMetaData_startTime_get
    if _newclass:
        startTime = _swig_property(_TpcAccess.TPC_TMetaData_startTime_get, _TpcAccess.TPC_TMetaData_startTime_set)
    __swig_setmethods__["triggerTime"] = _TpcAccess.TPC_TMetaData_triggerTime_set
    __swig_getmethods__["triggerTime"] = _TpcAccess.TPC_TMetaData_triggerTime_get
    if _newclass:
        triggerTime = _swig_property(_TpcAccess.TPC_TMetaData_triggerTime_get, _TpcAccess.TPC_TMetaData_triggerTime_set)
    __swig_setmethods__["triggerSample"] = _TpcAccess.TPC_TMetaData_triggerSample_set
    __swig_getmethods__["triggerSample"] = _TpcAccess.TPC_TMetaData_triggerSample_get
    if _newclass:
        triggerSample = _swig_property(_TpcAccess.TPC_TMetaData_triggerSample_get, _TpcAccess.TPC_TMetaData_triggerSample_set)
    __swig_setmethods__["blockLength"] = _TpcAccess.TPC_TMetaData_blockLength_set
    __swig_getmethods__["blockLength"] = _TpcAccess.TPC_TMetaData_blockLength_get
    if _newclass:
        blockLength = _swig_property(_TpcAccess.TPC_TMetaData_blockLength_get, _TpcAccess.TPC_TMetaData_blockLength_set)
    __swig_setmethods__["stopTriggerSample"] = _TpcAccess.TPC_TMetaData_stopTriggerSample_set
    __swig_getmethods__["stopTriggerSample"] = _TpcAccess.TPC_TMetaData_stopTriggerSample_get
    if _newclass:
        stopTriggerSample = _swig_property(_TpcAccess.TPC_TMetaData_stopTriggerSample_get, _TpcAccess.TPC_TMetaData_stopTriggerSample_set)
    __swig_setmethods__["singleChannel"] = _TpcAccess.TPC_TMetaData_singleChannel_set
    __swig_getmethods__["singleChannel"] = _TpcAccess.TPC_TMetaData_singleChannel_get
    if _newclass:
        singleChannel = _swig_property(_TpcAccess.TPC_TMetaData_singleChannel_get, _TpcAccess.TPC_TMetaData_singleChannel_set)
    __swig_setmethods__["boardAddress"] = _TpcAccess.TPC_TMetaData_boardAddress_set
    __swig_getmethods__["boardAddress"] = _TpcAccess.TPC_TMetaData_boardAddress_get
    if _newclass:
        boardAddress = _swig_property(_TpcAccess.TPC_TMetaData_boardAddress_get, _TpcAccess.TPC_TMetaData_boardAddress_set)
    __swig_setmethods__["inputNumber"] = _TpcAccess.TPC_TMetaData_inputNumber_set
    __swig_getmethods__["inputNumber"] = _TpcAccess.TPC_TMetaData_inputNumber_get
    if _newclass:
        inputNumber = _swig_property(_TpcAccess.TPC_TMetaData_inputNumber_get, _TpcAccess.TPC_TMetaData_inputNumber_set)

    def __init__(self):
        this = _TpcAccess.new_TPC_TMetaData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TpcAccess.delete_TPC_TMetaData
    __del__ = lambda self: None
TPC_TMetaData_swigregister = _TpcAccess.TPC_TMetaData_swigregister
TPC_TMetaData_swigregister(TPC_TMetaData)


def TPC_GetTMetaData(deviceIx: 'int', boardAddress: 'int', blockNumber: 'int', measurementNumber: 'int', metaData: 'TPC_TMetaData', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetTMetaData(deviceIx, boardAddress, blockNumber, measurementNumber, metaData, structSize)
TPC_GetTMetaData = _TpcAccess.TPC_GetTMetaData

def TPC_GetAllTMetaData(deviceIx: 'int', boardAddress: 'int', blockNumberFrom: 'int', blockNumberTo: 'int', measurementNumber: 'int', metaData: 'TPC_TMetaData', structSize: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetAllTMetaData(deviceIx, boardAddress, blockNumberFrom, blockNumberTo, measurementNumber, metaData, structSize)
TPC_GetAllTMetaData = _TpcAccess.TPC_GetAllTMetaData

def TPC_GetData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', measurementNumber: 'int', dataStart: 'uint64_t', dataLength: 'int', data: 'double *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetData(deviceIx, boardAddress, inputNumber, blockNumber, measurementNumber, dataStart, dataLength, data)
TPC_GetData = _TpcAccess.TPC_GetData

def TPC_GetRawData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', measurementNumber: 'int', dataStart: 'uint64_t', dataLength: 'int', data: 'int32_t *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetRawData(deviceIx, boardAddress, inputNumber, blockNumber, measurementNumber, dataStart, dataLength, data)
TPC_GetRawData = _TpcAccess.TPC_GetRawData

def TPC_GetMinMaxData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', measurementNumber: 'int', dataStart: 'uint64_t', dataLength: 'uint64_t', resultLength: 'int', data: 'double *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetMinMaxData(deviceIx, boardAddress, inputNumber, blockNumber, measurementNumber, dataStart, dataLength, resultLength, data)
TPC_GetMinMaxData = _TpcAccess.TPC_GetMinMaxData

def TPC_GetRawMinMaxData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', measurementNumber: 'int', dataStart: 'uint64_t', dataLength: 'uint64_t', resultLength: 'int', data: 'int32_t *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetRawMinMaxData(deviceIx, boardAddress, inputNumber, blockNumber, measurementNumber, dataStart, dataLength, resultLength, data)
TPC_GetRawMinMaxData = _TpcAccess.TPC_GetRawMinMaxData

def TPC_DeferredGetData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', dataStart: 'uint64_t', dataLength: 'int', data: 'double *', error: 'enum TPC_ErrorCode *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_DeferredGetData(deviceIx, boardAddress, inputNumber, blockNumber, dataStart, dataLength, data, error)
TPC_DeferredGetData = _TpcAccess.TPC_DeferredGetData

def TPC_DeferredGetRawData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', dataStart: 'uint64_t', dataLength: 'int', data: 'int32_t *', error: 'enum TPC_ErrorCode *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_DeferredGetRawData(deviceIx, boardAddress, inputNumber, blockNumber, dataStart, dataLength, data, error)
TPC_DeferredGetRawData = _TpcAccess.TPC_DeferredGetRawData

def TPC_DeferredGetMinMaxData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', dataStart: 'uint64_t', dataLength: 'uint64_t', resultLength: 'int', data: 'double *', error: 'enum TPC_ErrorCode *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_DeferredGetMinMaxData(deviceIx, boardAddress, inputNumber, blockNumber, dataStart, dataLength, resultLength, data, error)
TPC_DeferredGetMinMaxData = _TpcAccess.TPC_DeferredGetMinMaxData

def TPC_DeferredGetRawMinMaxData(deviceIx: 'int', boardAddress: 'int', inputNumber: 'int', blockNumber: 'int', dataStart: 'uint64_t', dataLength: 'uint64_t', resultLength: 'int', data: 'int32_t *', error: 'enum TPC_ErrorCode *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_DeferredGetRawMinMaxData(deviceIx, boardAddress, inputNumber, blockNumber, dataStart, dataLength, resultLength, data, error)
TPC_DeferredGetRawMinMaxData = _TpcAccess.TPC_DeferredGetRawMinMaxData

def TPC_ProcessDeferredDataRequests(measurementNumber: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_ProcessDeferredDataRequests(measurementNumber)
TPC_ProcessDeferredDataRequests = _TpcAccess.TPC_ProcessDeferredDataRequests

def TPC_CancelDeferredDataRequests() -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_CancelDeferredDataRequests()
TPC_CancelDeferredDataRequests = _TpcAccess.TPC_CancelDeferredDataRequests

def TPC_SendServerCustomCommand(deviceIx: 'int', command: 'char *', result: 'char *', length: 'int') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_SendServerCustomCommand(deviceIx, command, result, length)
TPC_SendServerCustomCommand = _TpcAccess.TPC_SendServerCustomCommand

def TPC_WriteSettingFile(filename: 'char const *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_WriteSettingFile(filename)
TPC_WriteSettingFile = _TpcAccess.TPC_WriteSettingFile

def TPC_LoadSettingFile(filename: 'char const *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_LoadSettingFile(filename)
TPC_LoadSettingFile = _TpcAccess.TPC_LoadSettingFile

def TPC_TerminateTpcAccess() -> "void":
    return _TpcAccess.TPC_TerminateTpcAccess()
TPC_TerminateTpcAccess = _TpcAccess.TPC_TerminateTpcAccess

def TPC_GetGPSLogList(deviceIx: 'int', arg2: 'int', to: 'int', log: 'char *') -> "enum TPC_ErrorCode":
    return _TpcAccess.TPC_GetGPSLogList(deviceIx, arg2, to, log)
TPC_GetGPSLogList = _TpcAccess.TPC_GetGPSLogList

def new_int32_tp() -> "int32_t *":
    return _TpcAccess.new_int32_tp()
new_int32_tp = _TpcAccess.new_int32_tp

def copy_int32_tp(value: 'int32_t') -> "int32_t *":
    return _TpcAccess.copy_int32_tp(value)
copy_int32_tp = _TpcAccess.copy_int32_tp

def delete_int32_tp(obj: 'int32_t *') -> "void":
    return _TpcAccess.delete_int32_tp(obj)
delete_int32_tp = _TpcAccess.delete_int32_tp

def int32_tp_assign(obj: 'int32_t *', value: 'int32_t') -> "void":
    return _TpcAccess.int32_tp_assign(obj, value)
int32_tp_assign = _TpcAccess.int32_tp_assign

def int32_tp_value(obj: 'int32_t *') -> "int32_t":
    return _TpcAccess.int32_tp_value(obj)
int32_tp_value = _TpcAccess.int32_tp_value

def new_int32_tArray(nelements: 'size_t') -> "int32_t *":
    return _TpcAccess.new_int32_tArray(nelements)
new_int32_tArray = _TpcAccess.new_int32_tArray

def delete_int32_tArray(ary: 'int32_t *') -> "void":
    return _TpcAccess.delete_int32_tArray(ary)
delete_int32_tArray = _TpcAccess.delete_int32_tArray

def int32_tArray_getitem(ary: 'int32_t *', index: 'size_t') -> "int32_t":
    return _TpcAccess.int32_tArray_getitem(ary, index)
int32_tArray_getitem = _TpcAccess.int32_tArray_getitem

def int32_tArray_setitem(ary: 'int32_t *', index: 'size_t', value: 'int32_t') -> "void":
    return _TpcAccess.int32_tArray_setitem(ary, index, value)
int32_tArray_setitem = _TpcAccess.int32_tArray_setitem

def new_doubleArray(nelements: 'size_t') -> "double *":
    return _TpcAccess.new_doubleArray(nelements)
new_doubleArray = _TpcAccess.new_doubleArray

def delete_doubleArray(ary: 'double *') -> "void":
    return _TpcAccess.delete_doubleArray(ary)
delete_doubleArray = _TpcAccess.delete_doubleArray

def doubleArray_getitem(ary: 'double *', index: 'size_t') -> "double":
    return _TpcAccess.doubleArray_getitem(ary, index)
doubleArray_getitem = _TpcAccess.doubleArray_getitem

def doubleArray_setitem(ary: 'double *', index: 'size_t', value: 'double') -> "void":
    return _TpcAccess.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _TpcAccess.doubleArray_setitem
# This file is compatible with both classic and new-style classes.


