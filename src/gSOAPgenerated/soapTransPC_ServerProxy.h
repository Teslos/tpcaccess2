/* soapTransPC_ServerProxy.h
   Generated by gSOAP 2.7.12 from ..\gSoapInput\TpcServerSoap.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapTransPC_ServerProxy_H
#define soapTransPC_ServerProxy_H
#include "soapH.h"
class TransPC_Server
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'TransPC_Server' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	TransPC_Server()
	{ soap = soap_new(); endpoint = "http://localhost:80"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:elsys-TransPC-device", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~TransPC_Server() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'GetInterfaceVersion' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetInterfaceVersion(int &version) { return soap ? soap_call_ns__GetInterfaceVersion(soap, endpoint, NULL, version) : SOAP_EOM; };
	/// Invoke 'ResetConfiguration' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ResetConfiguration(struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__ResetConfiguration(soap, endpoint, NULL, dummyOut) : SOAP_EOM; };
	/// Invoke 'AcquireDeviceLock' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__AcquireDeviceLock(struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__AcquireDeviceLock(soap, endpoint, NULL, dummyOut) : SOAP_EOM; };
	/// Invoke 'ReleaseDeviceLock' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ReleaseDeviceLock(struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__ReleaseDeviceLock(soap, endpoint, NULL, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetClusterConfiguration' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetClusterConfiguration(struct ns__ClusterConfiguration &clusters) { return soap ? soap_call_ns__GetClusterConfiguration(soap, endpoint, NULL, clusters) : SOAP_EOM; };
	/// Invoke 'SetClusterConfiguration' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetClusterConfiguration(struct ns__ClusterConfiguration clusters, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetClusterConfiguration(soap, endpoint, NULL, clusters, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetHardwareInfo' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetHardwareInfo(struct ns__HardwareInfo &hardwareInfo) { return soap ? soap_call_ns__GetHardwareInfo(soap, endpoint, NULL, hardwareInfo) : SOAP_EOM; };
	/// Invoke 'SetOneParameter' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetOneParameter(int boardAddress, int inputNumber, int parameterIndex, double value, struct ns__SetOneParameterResult &result) { return soap ? soap_call_ns__SetOneParameter(soap, endpoint, NULL, boardAddress, inputNumber, parameterIndex, value, result) : SOAP_EOM; };
	/// Invoke 'SetMultipleParameters' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetMultipleParameters(ns__ParameterList parameters, ns__SetParameterResultList &result) { return soap ? soap_call_ns__SetMultipleParameters(soap, endpoint, NULL, parameters, result) : SOAP_EOM; };
	/// Invoke 'GetAllCurrentParameters' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllCurrentParameters(ns__ParameterList &parameters) { return soap ? soap_call_ns__GetAllCurrentParameters(soap, endpoint, NULL, parameters) : SOAP_EOM; };
	/// Invoke 'GetAllPreviousParameters' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllPreviousParameters(int currentMeasurementNumber, ns__ParameterList &parameters) { return soap ? soap_call_ns__GetAllPreviousParameters(soap, endpoint, NULL, currentMeasurementNumber, parameters) : SOAP_EOM; };
	/// Invoke 'SetAttributes' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetAttributes(ns__AttributeList values, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetAttributes(soap, endpoint, NULL, values, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetAllCurrentAttributes' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllCurrentAttributes(ns__AttributeList &result) { return soap ? soap_call_ns__GetAllCurrentAttributes(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'GetAllPreviousAttributes' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllPreviousAttributes(int currentMeasurementNumber, ns__AttributeList &result) { return soap ? soap_call_ns__GetAllPreviousAttributes(soap, endpoint, NULL, currentMeasurementNumber, result) : SOAP_EOM; };
	/// Invoke 'GetSerTrgProtocol' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetSerTrgProtocol(int boardAddress, int &prot) { return soap ? soap_call_ns__GetSerTrgProtocol(soap, endpoint, NULL, boardAddress, prot) : SOAP_EOM; };
	/// Invoke 'ResetSerTrg' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ResetSerTrg(int boardAddress, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__ResetSerTrg(soap, endpoint, NULL, boardAddress, dummyOut) : SOAP_EOM; };
	/// Invoke 'SetI2CTrigger' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetI2CTrigger(int boardAddress, struct ns__I2CTriggerSettings settings, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetI2CTrigger(soap, endpoint, NULL, boardAddress, settings, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetI2CTrigger' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetI2CTrigger(int boardAddress, struct ns__I2CTriggerSettings &settings) { return soap ? soap_call_ns__GetI2CTrigger(soap, endpoint, NULL, boardAddress, settings) : SOAP_EOM; };
	/// Invoke 'SetCANTrigger' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetCANTrigger(int boardAddress, struct ns__CANTriggerSettings settings, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetCANTrigger(soap, endpoint, NULL, boardAddress, settings, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetCANTrigger' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetCANTrigger(int boardAddress, struct ns__CANTriggerSettings &settings) { return soap ? soap_call_ns__GetCANTrigger(soap, endpoint, NULL, boardAddress, settings) : SOAP_EOM; };
	/// Invoke 'GetAllCurrentAssociations' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllCurrentAssociations(struct ns__AssociationRowList &result) { return soap ? soap_call_ns__GetAllCurrentAssociations(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'GetAllPreviousAssociations' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllPreviousAssociations(int currentMeasurementNumber, struct ns__AssociationRowList &result) { return soap ? soap_call_ns__GetAllPreviousAssociations(soap, endpoint, NULL, currentMeasurementNumber, result) : SOAP_EOM; };
	/// Invoke 'SetAssociations' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetAssociations(struct ns__AssociationRowList associations, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetAssociations(soap, endpoint, NULL, associations, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetGPSLogList' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetGPSLogList(int from, int to, struct ns__GPSLogList &result) { return soap ? soap_call_ns__GetGPSLogList(soap, endpoint, NULL, from, to, result) : SOAP_EOM; };
	/// Invoke 'WriteDev' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__WriteDev(int boardAddress, int type, ns__DeviceData data, unsigned int aux1, unsigned int aux2, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__WriteDev(soap, endpoint, NULL, boardAddress, type, data, aux1, aux2, dummyOut) : SOAP_EOM; };
	/// Invoke 'ReadDev' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ReadDev(int boardAddress, int type, unsigned int count, unsigned int aux1, unsigned int aux2, ns__DeviceData &result) { return soap ? soap_call_ns__ReadDev(soap, endpoint, NULL, boardAddress, type, count, aux1, aux2, result) : SOAP_EOM; };
	/// Invoke 'ReadWriteTwi' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ReadWriteTwi(int boardAddress, unsigned int amplifier, ns__DeviceData data, ns__DeviceData &result) { return soap ? soap_call_ns__ReadWriteTwi(soap, endpoint, NULL, boardAddress, amplifier, data, result) : SOAP_EOM; };
	/// Invoke 'PrepareStart' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__PrepareStart(double *delayTime) { return soap ? soap_call_ns__PrepareStart(soap, endpoint, NULL, delayTime) : SOAP_EOM; };
	/// Invoke 'SetStartInfo' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetStartInfo(struct ns__DateTime startTime, int measurementNr, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetStartInfo(soap, endpoint, NULL, startTime, measurementNr, dummyOut) : SOAP_EOM; };
	/// Invoke 'ExecuteCommand' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__ExecuteCommand(int command, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__ExecuteCommand(soap, endpoint, NULL, command, dummyOut) : SOAP_EOM; };
	/// Invoke 'StartCalibration' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__StartCalibration(int type, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__StartCalibration(soap, endpoint, NULL, type, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetStatus' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetStatus(struct ns__Status &status) { return soap ? soap_call_ns__GetStatus(soap, endpoint, NULL, status) : SOAP_EOM; };
	/// Invoke 'WaitForStatusChange' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__WaitForStatusChange(unsigned int eventCounter, struct ns__Status &status) { return soap ? soap_call_ns__WaitForStatusChange(soap, endpoint, NULL, eventCounter, status) : SOAP_EOM; };
	/// Invoke 'LeaveWaitStatus' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__LeaveWaitStatus(struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__LeaveWaitStatus(soap, endpoint, NULL, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetMetadata' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetMetadata(int currentMeasurementNumber, int boardAddress, int blockFrom, int blockTo, ns__MetadataList &metadata) { return soap ? soap_call_ns__GetMetadata(soap, endpoint, NULL, currentMeasurementNumber, boardAddress, blockFrom, blockTo, metadata) : SOAP_EOM; };
	/// Invoke 'GetAllYMetadata' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAllYMetadata(int currentMeasurementNumber, ns__YMetadataList &metadata) { return soap ? soap_call_ns__GetAllYMetadata(soap, endpoint, NULL, currentMeasurementNumber, metadata) : SOAP_EOM; };
	/// Invoke 'GetData' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetData(int currentMeasurementNumber, ns__DataSpecificationArray requests, ns__Data &data) { return soap ? soap_call_ns__GetData(soap, endpoint, NULL, currentMeasurementNumber, requests, data) : SOAP_EOM; };
	/// Invoke 'SendServerCustomCommand' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SendServerCustomCommand(char *command, char **result) { return soap ? soap_call_ns__SendServerCustomCommand(soap, endpoint, NULL, command, result) : SOAP_EOM; };
	/// Invoke 'LoadAutosequence' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__LoadAutosequence(ns__AutoSequence Sequence, char **result) { return soap ? soap_call_ns__LoadAutosequence(soap, endpoint, NULL, Sequence, result) : SOAP_EOM; };
	/// Invoke 'StartAutoSequence' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__StartAutoSequence(char **result) { return soap ? soap_call_ns__StartAutoSequence(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'StopAutoSequence' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__StopAutoSequence(char **result) { return soap ? soap_call_ns__StopAutoSequence(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'GetAutoSequence' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetAutoSequence(ns__AutoSequence &result) { return soap ? soap_call_ns__GetAutoSequence(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'SetDeviceSettings' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__SetDeviceSettings(ns__DeviceInfo Settings, struct ns__DummyResponse *dummyOut) { return soap ? soap_call_ns__SetDeviceSettings(soap, endpoint, NULL, Settings, dummyOut) : SOAP_EOM; };
	/// Invoke 'GetFreeDiskSpace' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetFreeDiskSpace(ns__DiskSpace &DiskSpace) { return soap ? soap_call_ns__GetFreeDiskSpace(soap, endpoint, NULL, DiskSpace) : SOAP_EOM; };
	/// Invoke 'GetMACAddress' of service 'TransPC_Server' and return error code (or SOAP_OK)
	virtual int ns__GetMACAddress(char *IPAddress, ULONG64 &MACAddress) { return soap ? soap_call_ns__GetMACAddress(soap, endpoint, NULL, IPAddress, MACAddress) : SOAP_EOM; };
};
#endif
