/* soapTransPC_ServerObject.h
   Generated by gSOAP 2.7.12 from ..\gSoapInput\TpcServerSoap.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapTransPC_ServerObject_H
#define soapTransPC_ServerObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class TransPC_ServerService : public soap
{    public:
	TransPC_ServerService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:elsys-TransPC-device", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces) this->namespaces = namespaces; };
	virtual ~TransPC_ServerService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__GetInterfaceVersion(struct soap*, int &version);

SOAP_FMAC5 int SOAP_FMAC6 ns__ResetConfiguration(struct soap*, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__AcquireDeviceLock(struct soap*, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__ReleaseDeviceLock(struct soap*, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetClusterConfiguration(struct soap*, struct ns__ClusterConfiguration &clusters);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetClusterConfiguration(struct soap*, struct ns__ClusterConfiguration clusters, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetHardwareInfo(struct soap*, struct ns__HardwareInfo &hardwareInfo);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetOneParameter(struct soap*, int boardAddress, int inputNumber, int parameterIndex, double value, struct ns__SetOneParameterResult &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetMultipleParameters(struct soap*, ns__ParameterList parameters, ns__SetParameterResultList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllCurrentParameters(struct soap*, ns__ParameterList &parameters);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllPreviousParameters(struct soap*, int currentMeasurementNumber, ns__ParameterList &parameters);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetAttributes(struct soap*, ns__AttributeList values, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllCurrentAttributes(struct soap*, ns__AttributeList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllPreviousAttributes(struct soap*, int currentMeasurementNumber, ns__AttributeList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetSerTrgProtocol(struct soap*, int boardAddress, int &prot);

SOAP_FMAC5 int SOAP_FMAC6 ns__ResetSerTrg(struct soap*, int boardAddress, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetI2CTrigger(struct soap*, int boardAddress, struct ns__I2CTriggerSettings settings, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetI2CTrigger(struct soap*, int boardAddress, struct ns__I2CTriggerSettings &settings);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetCANTrigger(struct soap*, int boardAddress, struct ns__CANTriggerSettings settings, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetCANTrigger(struct soap*, int boardAddress, struct ns__CANTriggerSettings &settings);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllCurrentAssociations(struct soap*, struct ns__AssociationRowList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllPreviousAssociations(struct soap*, int currentMeasurementNumber, struct ns__AssociationRowList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetAssociations(struct soap*, struct ns__AssociationRowList associations, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetGPSLogList(struct soap*, int from, int to, struct ns__GPSLogList &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__WriteDev(struct soap*, int boardAddress, int type, ns__DeviceData data, unsigned int aux1, unsigned int aux2, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__ReadDev(struct soap*, int boardAddress, int type, unsigned int count, unsigned int aux1, unsigned int aux2, ns__DeviceData &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__ReadWriteTwi(struct soap*, int boardAddress, unsigned int amplifier, ns__DeviceData data, ns__DeviceData &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__PrepareStart(struct soap*, double *delayTime);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetStartInfo(struct soap*, struct ns__DateTime startTime, int measurementNr, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__ExecuteCommand(struct soap*, int command, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__StartCalibration(struct soap*, int type, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetStatus(struct soap*, struct ns__Status &status);

SOAP_FMAC5 int SOAP_FMAC6 ns__WaitForStatusChange(struct soap*, unsigned int eventCounter, struct ns__Status &status);

SOAP_FMAC5 int SOAP_FMAC6 ns__LeaveWaitStatus(struct soap*, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetMetadata(struct soap*, int currentMeasurementNumber, int boardAddress, int blockFrom, int blockTo, ns__MetadataList &metadata);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAllYMetadata(struct soap*, int currentMeasurementNumber, ns__YMetadataList &metadata);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetData(struct soap*, int currentMeasurementNumber, ns__DataSpecificationArray requests, ns__Data &data);

SOAP_FMAC5 int SOAP_FMAC6 ns__SendServerCustomCommand(struct soap*, char *command, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__LoadAutosequence(struct soap*, ns__AutoSequence Sequence, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__StartAutoSequence(struct soap*, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__StopAutoSequence(struct soap*, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetAutoSequence(struct soap*, ns__AutoSequence &result);

SOAP_FMAC5 int SOAP_FMAC6 ns__SetDeviceSettings(struct soap*, ns__DeviceInfo Settings, struct ns__DummyResponse *dummyOut);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetFreeDiskSpace(struct soap*, ns__DiskSpace &DiskSpace);

SOAP_FMAC5 int SOAP_FMAC6 ns__GetMACAddress(struct soap*, char *IPAddress, ULONG64 &MACAddress);

#endif
